
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : never : never
};


/**
 * Model User
 */

export type User = {
  id: number
  createdAt: Date
  updatedAt: Date
  firstName: string
  lastName: string
  email: string
  phone: number | null
  hashedPassword: string
  addressStreet1: string | null
  addressStreet2: string | null
  addressCity: string | null
  addressRegion: string | null
  addressZip: number | null
}

/**
 * Model Order
 */

export type Order = {
  id: number
  updatedAt: Date
  createdAt: Date
  userId: number
  total: Prisma.Decimal
  dateTime: Date
  promoCodeId: number | null
  addressStreet1: string
  addressStreet2: string | null
  addressCity: string
  addressRegion: string
  addressZip: number
  status: string
}

/**
 * Model OrderItem
 */

export type OrderItem = {
  id: number
  updatedAt: Date
  createdAt: Date
  orderId: number
  plantId: number
  quantity: number
}

/**
 * Model PromoCode
 */

export type PromoCode = {
  id: number
  name: string
  startDate: Date
  expirationDate: Date
}

/**
 * Model Plant
 */

export type Plant = {
  id: number
  name: string
  typeId: number
  description: string
  dimensions: string
  price: Prisma.Decimal
  stock: number
  potSize: string
}

/**
 * Model PlantType
 */

export type PlantType = {
  id: number
  name: string
}

/**
 * Model Image
 */

export type Image = {
  id: number
  plantId: number
  sequence: number
  url: string
}

/**
 * Model Tag
 */

export type Tag = {
  id: number
  name: string
}

/**
 * Model PlantTag
 */

export type PlantTag = {
  id: number
  plantId: number
  tagId: number
}

/**
 * Model Theme
 */

export type Theme = {
  id: number
  headliner1: number | null
  headliner2: number | null
  headliner3: number | null
  coverPicture1: string | null
  coverPicture2: string | null
  coverPicture3: string | null
  coverPicture4: string | null
  coverPicture5: string | null
  mainText1: string | null
  mainText2: string | null
  mainText3: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<GlobalReject>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<GlobalReject>;

  /**
   * `prisma.promoCode`: Exposes CRUD operations for the **PromoCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromoCodes
    * const promoCodes = await prisma.promoCode.findMany()
    * ```
    */
  get promoCode(): Prisma.PromoCodeDelegate<GlobalReject>;

  /**
   * `prisma.plant`: Exposes CRUD operations for the **Plant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plants
    * const plants = await prisma.plant.findMany()
    * ```
    */
  get plant(): Prisma.PlantDelegate<GlobalReject>;

  /**
   * `prisma.plantType`: Exposes CRUD operations for the **PlantType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantTypes
    * const plantTypes = await prisma.plantType.findMany()
    * ```
    */
  get plantType(): Prisma.PlantTypeDelegate<GlobalReject>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;

  /**
   * `prisma.plantTag`: Exposes CRUD operations for the **PlantTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantTags
    * const plantTags = await prisma.plantTag.findMany()
    * ```
    */
  get plantTag(): Prisma.PlantTagDelegate<GlobalReject>;

  /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.17.0
   * Query Engine version: 3c463ebd78b1d21d8fdacdd27899e280cf686223
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Order: 'Order',
    OrderItem: 'OrderItem',
    PromoCode: 'PromoCode',
    Plant: 'Plant',
    PlantType: 'PlantType',
    Image: 'Image',
    Tag: 'Tag',
    PlantTag: 'PlantTag',
    Theme: 'Theme'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
    phone: number | null
    addressZip: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number
    phone: number | null
    addressZip: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: number | null
    hashedPassword: string | null
    addressStreet1: string | null
    addressStreet2: string | null
    addressCity: string | null
    addressRegion: string | null
    addressZip: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: number | null
    hashedPassword: string | null
    addressStreet1: string | null
    addressStreet2: string | null
    addressCity: string | null
    addressRegion: string | null
    addressZip: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number | null
    updatedAt: number | null
    firstName: number | null
    lastName: number | null
    email: number | null
    phone: number | null
    hashedPassword: number | null
    addressStreet1: number | null
    addressStreet2: number | null
    addressCity: number | null
    addressRegion: number | null
    addressZip: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    phone?: true
    addressZip?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    phone?: true
    addressZip?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    hashedPassword?: true
    addressStreet1?: true
    addressStreet2?: true
    addressCity?: true
    addressRegion?: true
    addressZip?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    hashedPassword?: true
    addressStreet1?: true
    addressStreet2?: true
    addressCity?: true
    addressRegion?: true
    addressZip?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    hashedPassword?: true
    addressStreet1?: true
    addressStreet2?: true
    addressCity?: true
    addressRegion?: true
    addressZip?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    hashedPassword?: boolean
    addressStreet1?: boolean
    addressStreet2?: boolean
    addressCity?: boolean
    addressRegion?: boolean
    addressZip?: boolean
    orders?: boolean | OrderFindManyArgs
  }

  export type UserInclude = {
    orders?: boolean | OrderFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'orders'
        ? Array < OrderGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'orders'
        ? Array < OrderGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orders<T extends OrderFindManyArgs = {}>(args?: Subset<T, OrderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserUncheckedCreateInput, UserCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUncheckedUpdateInput, UserUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUncheckedUpdateManyInput, UserUpdateManyMutationInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserUncheckedCreateInput, UserCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUncheckedUpdateInput, UserUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Order
   */


  export type AggregateOrder = {
    count: OrderCountAggregateOutputType | null
    avg: OrderAvgAggregateOutputType | null
    sum: OrderSumAggregateOutputType | null
    min: OrderMinAggregateOutputType | null
    max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number
    userId: number
    total: Decimal
    promoCodeId: number | null
    addressZip: number
  }

  export type OrderSumAggregateOutputType = {
    id: number
    userId: number
    total: Decimal
    promoCodeId: number | null
    addressZip: number
  }

  export type OrderMinAggregateOutputType = {
    id: number
    updatedAt: Date | null
    createdAt: Date | null
    userId: number
    total: Decimal
    dateTime: Date | null
    promoCodeId: number | null
    addressStreet1: string | null
    addressStreet2: string | null
    addressCity: string | null
    addressRegion: string | null
    addressZip: number
    status: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number
    updatedAt: Date | null
    createdAt: Date | null
    userId: number
    total: Decimal
    dateTime: Date | null
    promoCodeId: number | null
    addressStreet1: string | null
    addressStreet2: string | null
    addressCity: string | null
    addressRegion: string | null
    addressZip: number
    status: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    updatedAt: number | null
    createdAt: number | null
    userId: number
    total: number
    dateTime: number | null
    promoCodeId: number | null
    addressStreet1: number | null
    addressStreet2: number | null
    addressCity: number | null
    addressRegion: number | null
    addressZip: number
    status: number | null
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    total?: true
    promoCodeId?: true
    addressZip?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    total?: true
    promoCodeId?: true
    addressZip?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    userId?: true
    total?: true
    dateTime?: true
    promoCodeId?: true
    addressStreet1?: true
    addressStreet2?: true
    addressCity?: true
    addressRegion?: true
    addressZip?: true
    status?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    userId?: true
    total?: true
    dateTime?: true
    promoCodeId?: true
    addressStreet1?: true
    addressStreet2?: true
    addressCity?: true
    addressRegion?: true
    addressZip?: true
    status?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    userId?: true
    total?: true
    dateTime?: true
    promoCodeId?: true
    addressStreet1?: true
    addressStreet2?: true
    addressCity?: true
    addressRegion?: true
    addressZip?: true
    status?: true
    _all?: true
  }

  export type OrderAggregateArgs = {
    /**
     * Filter which Order to aggregate.
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
    **/
    orderBy?: Enumerable<OrderOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
    [P in keyof T & keyof AggregateOrder]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }



  export type OrderSelect = {
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    userId?: boolean
    total?: boolean
    dateTime?: boolean
    promoCodeId?: boolean
    addressStreet1?: boolean
    addressStreet2?: boolean
    addressCity?: boolean
    addressRegion?: boolean
    addressZip?: boolean
    status?: boolean
    promoCode?: boolean | PromoCodeArgs
    user?: boolean | UserArgs
    orderItems?: boolean | OrderItemFindManyArgs
  }

  export type OrderInclude = {
    promoCode?: boolean | PromoCodeArgs
    user?: boolean | UserArgs
    orderItems?: boolean | OrderItemFindManyArgs
  }

  export type OrderGetPayload<
    S extends boolean | null | undefined | OrderArgs,
    U = keyof S
      > = S extends true
        ? Order
    : S extends undefined
    ? never
    : S extends OrderArgs | OrderFindManyArgs
    ?'include' extends U
    ? Order  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'promoCode'
        ? PromoCodeGetPayload<S['include'][P]> | null :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'orderItems'
        ? Array < OrderItemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Order ?Order [P]
  : 
          P extends 'promoCode'
        ? PromoCodeGetPayload<S['select'][P]> | null :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'orderItems'
        ? Array < OrderItemGetPayload<S['select'][P]>>  : never
  } 
    : Order
  : Order


  type OrderCountArgs = Merge<
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }
  >

  export interface OrderDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Order'> extends True ? CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>> : CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Order'> extends True ? CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>> : CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs>(
      args?: SelectSubset<T, OrderFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs>(
      args: SelectSubset<T, OrderCreateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs>(
      args: SelectSubset<T, OrderDeleteArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs>(
      args: SelectSubset<T, OrderUpdateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs>(
      args?: SelectSubset<T, OrderDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs>(
      args: SelectSubset<T, OrderUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs>(
      args: SelectSubset<T, OrderUpsertArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): PrismaPromise<GetOrderAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    promoCode<T extends PromoCodeArgs = {}>(args?: Subset<T, PromoCodeArgs>): CheckSelect<T, Prisma__PromoCodeClient<PromoCode | null >, Prisma__PromoCodeClient<PromoCodeGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    orderItems<T extends OrderItemFindManyArgs = {}>(args?: Subset<T, OrderItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderItem>>, PrismaPromise<Array<OrderItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Throw an Error if a Order can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Order to fetch.
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Throw an Error if a Order can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Order to fetch.
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
    **/
    orderBy?: Enumerable<OrderOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
    **/
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Filter, which Orders to fetch.
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
    **/
    orderBy?: Enumerable<OrderOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
    **/
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order create
   */
  export type OrderCreateArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * The data needed to create a Order.
    **/
    data: XOR<OrderUncheckedCreateInput, OrderCreateInput>
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * The data needed to update a Order.
    **/
    data: XOR<OrderUncheckedUpdateInput, OrderUpdateInput>
    /**
     * Choose, which Order to update.
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs = {
    data: XOR<OrderUncheckedUpdateManyInput, OrderUpdateManyMutationInput>
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * The filter to search for the Order to update in case it exists.
    **/
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
    **/
    create: XOR<OrderUncheckedCreateInput, OrderCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<OrderUncheckedUpdateInput, OrderUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
    /**
     * Filter which Order to delete.
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs = {
    where?: OrderWhereInput
  }


  /**
   * Order without action
   */
  export type OrderArgs = {
    /**
     * Select specific fields to fetch from the Order
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderInclude | null
  }



  /**
   * Model OrderItem
   */


  export type AggregateOrderItem = {
    count: OrderItemCountAggregateOutputType | null
    avg: OrderItemAvgAggregateOutputType | null
    sum: OrderItemSumAggregateOutputType | null
    min: OrderItemMinAggregateOutputType | null
    max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number
    orderId: number
    plantId: number
    quantity: number
  }

  export type OrderItemSumAggregateOutputType = {
    id: number
    orderId: number
    plantId: number
    quantity: number
  }

  export type OrderItemMinAggregateOutputType = {
    id: number
    updatedAt: Date | null
    createdAt: Date | null
    orderId: number
    plantId: number
    quantity: number
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number
    updatedAt: Date | null
    createdAt: Date | null
    orderId: number
    plantId: number
    quantity: number
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    updatedAt: number | null
    createdAt: number | null
    orderId: number
    plantId: number
    quantity: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    orderId?: true
    plantId?: true
    quantity?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    orderId?: true
    plantId?: true
    quantity?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    orderId?: true
    plantId?: true
    quantity?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    orderId?: true
    plantId?: true
    quantity?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    updatedAt?: true
    createdAt?: true
    orderId?: true
    plantId?: true
    quantity?: true
    _all?: true
  }

  export type OrderItemAggregateArgs = {
    /**
     * Filter which OrderItem to aggregate.
    **/
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
    **/
    orderBy?: Enumerable<OrderItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
    [P in keyof T & keyof AggregateOrderItem]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }



  export type OrderItemSelect = {
    id?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    orderId?: boolean
    plantId?: boolean
    quantity?: boolean
    order?: boolean | OrderArgs
    plant?: boolean | PlantArgs
  }

  export type OrderItemInclude = {
    order?: boolean | OrderArgs
    plant?: boolean | PlantArgs
  }

  export type OrderItemGetPayload<
    S extends boolean | null | undefined | OrderItemArgs,
    U = keyof S
      > = S extends true
        ? OrderItem
    : S extends undefined
    ? never
    : S extends OrderItemArgs | OrderItemFindManyArgs
    ?'include' extends U
    ? OrderItem  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'order'
        ? OrderGetPayload<S['include'][P]> :
        P extends 'plant'
        ? PlantGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OrderItem ?OrderItem [P]
  : 
          P extends 'order'
        ? OrderGetPayload<S['select'][P]> :
        P extends 'plant'
        ? PlantGetPayload<S['select'][P]> : never
  } 
    : OrderItem
  : OrderItem


  type OrderItemCountArgs = Merge<
    Omit<OrderItemFindManyArgs, 'select' | 'include'> & {
      select?: OrderItemCountAggregateInputType | true
    }
  >

  export interface OrderItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OrderItem'> extends True ? CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>> : CheckSelect<T, Prisma__OrderItemClient<OrderItem | null >, Prisma__OrderItemClient<OrderItemGetPayload<T> | null >>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OrderItem'> extends True ? CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>> : CheckSelect<T, Prisma__OrderItemClient<OrderItem | null >, Prisma__OrderItemClient<OrderItemGetPayload<T> | null >>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderItemFindManyArgs>(
      args?: SelectSubset<T, OrderItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OrderItem>>, PrismaPromise<Array<OrderItemGetPayload<T>>>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
    **/
    create<T extends OrderItemCreateArgs>(
      args: SelectSubset<T, OrderItemCreateArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
    **/
    delete<T extends OrderItemDeleteArgs>(
      args: SelectSubset<T, OrderItemDeleteArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderItemUpdateArgs>(
      args: SelectSubset<T, OrderItemUpdateArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderItemDeleteManyArgs>(
      args?: SelectSubset<T, OrderItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderItemUpdateManyArgs>(
      args: SelectSubset<T, OrderItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
    **/
    upsert<T extends OrderItemUpsertArgs>(
      args: SelectSubset<T, OrderItemUpsertArgs>
    ): CheckSelect<T, Prisma__OrderItemClient<OrderItem>, Prisma__OrderItemClient<OrderItemGetPayload<T>>>

    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): PrismaPromise<GetOrderItemAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    order<T extends OrderArgs = {}>(args?: Subset<T, OrderArgs>): CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>;

    plant<T extends PlantArgs = {}>(args?: Subset<T, PlantArgs>): CheckSelect<T, Prisma__PlantClient<Plant | null >, Prisma__PlantClient<PlantGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * Throw an Error if a OrderItem can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderItem to fetch.
    **/
    where: OrderItemWhereUniqueInput
  }


  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * Throw an Error if a OrderItem can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderItem to fetch.
    **/
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
    **/
    orderBy?: Enumerable<OrderItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
    **/
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
    **/
    distinct?: Enumerable<OrderItemScalarFieldEnum>
  }


  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * Filter, which OrderItems to fetch.
    **/
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
    **/
    orderBy?: Enumerable<OrderItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
    **/
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
    **/
    skip?: number
    distinct?: Enumerable<OrderItemScalarFieldEnum>
  }


  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * The data needed to create a OrderItem.
    **/
    data: XOR<OrderItemUncheckedCreateInput, OrderItemCreateInput>
  }


  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * The data needed to update a OrderItem.
    **/
    data: XOR<OrderItemUncheckedUpdateInput, OrderItemUpdateInput>
    /**
     * Choose, which OrderItem to update.
    **/
    where: OrderItemWhereUniqueInput
  }


  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs = {
    data: XOR<OrderItemUncheckedUpdateManyInput, OrderItemUpdateManyMutationInput>
    where?: OrderItemWhereInput
  }


  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
    **/
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
    **/
    create: XOR<OrderItemUncheckedCreateInput, OrderItemCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<OrderItemUncheckedUpdateInput, OrderItemUpdateInput>
  }


  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
    /**
     * Filter which OrderItem to delete.
    **/
    where: OrderItemWhereUniqueInput
  }


  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs = {
    where?: OrderItemWhereInput
  }


  /**
   * OrderItem without action
   */
  export type OrderItemArgs = {
    /**
     * Select specific fields to fetch from the OrderItem
    **/
    select?: OrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrderItemInclude | null
  }



  /**
   * Model PromoCode
   */


  export type AggregatePromoCode = {
    count: PromoCodeCountAggregateOutputType | null
    avg: PromoCodeAvgAggregateOutputType | null
    sum: PromoCodeSumAggregateOutputType | null
    min: PromoCodeMinAggregateOutputType | null
    max: PromoCodeMaxAggregateOutputType | null
  }

  export type PromoCodeAvgAggregateOutputType = {
    id: number
  }

  export type PromoCodeSumAggregateOutputType = {
    id: number
  }

  export type PromoCodeMinAggregateOutputType = {
    id: number
    name: string | null
    startDate: Date | null
    expirationDate: Date | null
  }

  export type PromoCodeMaxAggregateOutputType = {
    id: number
    name: string | null
    startDate: Date | null
    expirationDate: Date | null
  }

  export type PromoCodeCountAggregateOutputType = {
    id: number
    name: number | null
    startDate: number | null
    expirationDate: number | null
    _all: number
  }


  export type PromoCodeAvgAggregateInputType = {
    id?: true
  }

  export type PromoCodeSumAggregateInputType = {
    id?: true
  }

  export type PromoCodeMinAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    expirationDate?: true
  }

  export type PromoCodeMaxAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    expirationDate?: true
  }

  export type PromoCodeCountAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    expirationDate?: true
    _all?: true
  }

  export type PromoCodeAggregateArgs = {
    /**
     * Filter which PromoCode to aggregate.
    **/
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
    **/
    orderBy?: Enumerable<PromoCodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromoCodes
    **/
    count?: true | PromoCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PromoCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PromoCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PromoCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PromoCodeMaxAggregateInputType
  }

  export type GetPromoCodeAggregateType<T extends PromoCodeAggregateArgs> = {
    [P in keyof T & keyof AggregatePromoCode]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromoCode[P]>
      : GetScalarType<T[P], AggregatePromoCode[P]>
  }



  export type PromoCodeSelect = {
    id?: boolean
    name?: boolean
    startDate?: boolean
    expirationDate?: boolean
    orders?: boolean | OrderFindManyArgs
  }

  export type PromoCodeInclude = {
    orders?: boolean | OrderFindManyArgs
  }

  export type PromoCodeGetPayload<
    S extends boolean | null | undefined | PromoCodeArgs,
    U = keyof S
      > = S extends true
        ? PromoCode
    : S extends undefined
    ? never
    : S extends PromoCodeArgs | PromoCodeFindManyArgs
    ?'include' extends U
    ? PromoCode  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'orders'
        ? Array < OrderGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PromoCode ?PromoCode [P]
  : 
          P extends 'orders'
        ? Array < OrderGetPayload<S['select'][P]>>  : never
  } 
    : PromoCode
  : PromoCode


  type PromoCodeCountArgs = Merge<
    Omit<PromoCodeFindManyArgs, 'select' | 'include'> & {
      select?: PromoCodeCountAggregateInputType | true
    }
  >

  export interface PromoCodeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PromoCode that matches the filter.
     * @param {PromoCodeFindUniqueArgs} args - Arguments to find a PromoCode
     * @example
     * // Get one PromoCode
     * const promoCode = await prisma.promoCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PromoCodeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PromoCodeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PromoCode'> extends True ? CheckSelect<T, Prisma__PromoCodeClient<PromoCode>, Prisma__PromoCodeClient<PromoCodeGetPayload<T>>> : CheckSelect<T, Prisma__PromoCodeClient<PromoCode | null >, Prisma__PromoCodeClient<PromoCodeGetPayload<T> | null >>

    /**
     * Find the first PromoCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeFindFirstArgs} args - Arguments to find a PromoCode
     * @example
     * // Get one PromoCode
     * const promoCode = await prisma.promoCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PromoCodeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PromoCodeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PromoCode'> extends True ? CheckSelect<T, Prisma__PromoCodeClient<PromoCode>, Prisma__PromoCodeClient<PromoCodeGetPayload<T>>> : CheckSelect<T, Prisma__PromoCodeClient<PromoCode | null >, Prisma__PromoCodeClient<PromoCodeGetPayload<T> | null >>

    /**
     * Find zero or more PromoCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromoCodes
     * const promoCodes = await prisma.promoCode.findMany()
     * 
     * // Get first 10 PromoCodes
     * const promoCodes = await prisma.promoCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promoCodeWithIdOnly = await prisma.promoCode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PromoCodeFindManyArgs>(
      args?: SelectSubset<T, PromoCodeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PromoCode>>, PrismaPromise<Array<PromoCodeGetPayload<T>>>>

    /**
     * Create a PromoCode.
     * @param {PromoCodeCreateArgs} args - Arguments to create a PromoCode.
     * @example
     * // Create one PromoCode
     * const PromoCode = await prisma.promoCode.create({
     *   data: {
     *     // ... data to create a PromoCode
     *   }
     * })
     * 
    **/
    create<T extends PromoCodeCreateArgs>(
      args: SelectSubset<T, PromoCodeCreateArgs>
    ): CheckSelect<T, Prisma__PromoCodeClient<PromoCode>, Prisma__PromoCodeClient<PromoCodeGetPayload<T>>>

    /**
     * Delete a PromoCode.
     * @param {PromoCodeDeleteArgs} args - Arguments to delete one PromoCode.
     * @example
     * // Delete one PromoCode
     * const PromoCode = await prisma.promoCode.delete({
     *   where: {
     *     // ... filter to delete one PromoCode
     *   }
     * })
     * 
    **/
    delete<T extends PromoCodeDeleteArgs>(
      args: SelectSubset<T, PromoCodeDeleteArgs>
    ): CheckSelect<T, Prisma__PromoCodeClient<PromoCode>, Prisma__PromoCodeClient<PromoCodeGetPayload<T>>>

    /**
     * Update one PromoCode.
     * @param {PromoCodeUpdateArgs} args - Arguments to update one PromoCode.
     * @example
     * // Update one PromoCode
     * const promoCode = await prisma.promoCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PromoCodeUpdateArgs>(
      args: SelectSubset<T, PromoCodeUpdateArgs>
    ): CheckSelect<T, Prisma__PromoCodeClient<PromoCode>, Prisma__PromoCodeClient<PromoCodeGetPayload<T>>>

    /**
     * Delete zero or more PromoCodes.
     * @param {PromoCodeDeleteManyArgs} args - Arguments to filter PromoCodes to delete.
     * @example
     * // Delete a few PromoCodes
     * const { count } = await prisma.promoCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PromoCodeDeleteManyArgs>(
      args?: SelectSubset<T, PromoCodeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromoCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromoCodes
     * const promoCode = await prisma.promoCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PromoCodeUpdateManyArgs>(
      args: SelectSubset<T, PromoCodeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PromoCode.
     * @param {PromoCodeUpsertArgs} args - Arguments to update or create a PromoCode.
     * @example
     * // Update or create a PromoCode
     * const promoCode = await prisma.promoCode.upsert({
     *   create: {
     *     // ... data to create a PromoCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromoCode we want to update
     *   }
     * })
    **/
    upsert<T extends PromoCodeUpsertArgs>(
      args: SelectSubset<T, PromoCodeUpsertArgs>
    ): CheckSelect<T, Prisma__PromoCodeClient<PromoCode>, Prisma__PromoCodeClient<PromoCodeGetPayload<T>>>

    /**
     * Count the number of PromoCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeCountArgs} args - Arguments to filter PromoCodes to count.
     * @example
     * // Count the number of PromoCodes
     * const count = await prisma.promoCode.count({
     *   where: {
     *     // ... the filter for the PromoCodes we want to count
     *   }
     * })
    **/
    count<T extends PromoCodeCountArgs>(
      args?: Subset<T, PromoCodeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromoCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromoCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromoCodeAggregateArgs>(args: Subset<T, PromoCodeAggregateArgs>): PrismaPromise<GetPromoCodeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for PromoCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PromoCodeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orders<T extends OrderFindManyArgs = {}>(args?: Subset<T, OrderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PromoCode findUnique
   */
  export type PromoCodeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * Throw an Error if a PromoCode can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PromoCode to fetch.
    **/
    where: PromoCodeWhereUniqueInput
  }


  /**
   * PromoCode findFirst
   */
  export type PromoCodeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * Throw an Error if a PromoCode can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PromoCode to fetch.
    **/
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
    **/
    orderBy?: Enumerable<PromoCodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromoCodes.
    **/
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromoCodes.
    **/
    distinct?: Enumerable<PromoCodeScalarFieldEnum>
  }


  /**
   * PromoCode findMany
   */
  export type PromoCodeFindManyArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * Filter, which PromoCodes to fetch.
    **/
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
    **/
    orderBy?: Enumerable<PromoCodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromoCodes.
    **/
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
    **/
    skip?: number
    distinct?: Enumerable<PromoCodeScalarFieldEnum>
  }


  /**
   * PromoCode create
   */
  export type PromoCodeCreateArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * The data needed to create a PromoCode.
    **/
    data: XOR<PromoCodeUncheckedCreateInput, PromoCodeCreateInput>
  }


  /**
   * PromoCode update
   */
  export type PromoCodeUpdateArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * The data needed to update a PromoCode.
    **/
    data: XOR<PromoCodeUncheckedUpdateInput, PromoCodeUpdateInput>
    /**
     * Choose, which PromoCode to update.
    **/
    where: PromoCodeWhereUniqueInput
  }


  /**
   * PromoCode updateMany
   */
  export type PromoCodeUpdateManyArgs = {
    data: XOR<PromoCodeUncheckedUpdateManyInput, PromoCodeUpdateManyMutationInput>
    where?: PromoCodeWhereInput
  }


  /**
   * PromoCode upsert
   */
  export type PromoCodeUpsertArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * The filter to search for the PromoCode to update in case it exists.
    **/
    where: PromoCodeWhereUniqueInput
    /**
     * In case the PromoCode found by the `where` argument doesn't exist, create a new PromoCode with this data.
    **/
    create: XOR<PromoCodeUncheckedCreateInput, PromoCodeCreateInput>
    /**
     * In case the PromoCode was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PromoCodeUncheckedUpdateInput, PromoCodeUpdateInput>
  }


  /**
   * PromoCode delete
   */
  export type PromoCodeDeleteArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
    /**
     * Filter which PromoCode to delete.
    **/
    where: PromoCodeWhereUniqueInput
  }


  /**
   * PromoCode deleteMany
   */
  export type PromoCodeDeleteManyArgs = {
    where?: PromoCodeWhereInput
  }


  /**
   * PromoCode without action
   */
  export type PromoCodeArgs = {
    /**
     * Select specific fields to fetch from the PromoCode
    **/
    select?: PromoCodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PromoCodeInclude | null
  }



  /**
   * Model Plant
   */


  export type AggregatePlant = {
    count: PlantCountAggregateOutputType | null
    avg: PlantAvgAggregateOutputType | null
    sum: PlantSumAggregateOutputType | null
    min: PlantMinAggregateOutputType | null
    max: PlantMaxAggregateOutputType | null
  }

  export type PlantAvgAggregateOutputType = {
    id: number
    typeId: number
    price: Decimal
    stock: number
  }

  export type PlantSumAggregateOutputType = {
    id: number
    typeId: number
    price: Decimal
    stock: number
  }

  export type PlantMinAggregateOutputType = {
    id: number
    name: string | null
    typeId: number
    description: string | null
    dimensions: string | null
    price: Decimal
    stock: number
    potSize: string | null
  }

  export type PlantMaxAggregateOutputType = {
    id: number
    name: string | null
    typeId: number
    description: string | null
    dimensions: string | null
    price: Decimal
    stock: number
    potSize: string | null
  }

  export type PlantCountAggregateOutputType = {
    id: number
    name: number | null
    typeId: number
    description: number | null
    dimensions: number | null
    price: number
    stock: number
    potSize: number | null
    _all: number
  }


  export type PlantAvgAggregateInputType = {
    id?: true
    typeId?: true
    price?: true
    stock?: true
  }

  export type PlantSumAggregateInputType = {
    id?: true
    typeId?: true
    price?: true
    stock?: true
  }

  export type PlantMinAggregateInputType = {
    id?: true
    name?: true
    typeId?: true
    description?: true
    dimensions?: true
    price?: true
    stock?: true
    potSize?: true
  }

  export type PlantMaxAggregateInputType = {
    id?: true
    name?: true
    typeId?: true
    description?: true
    dimensions?: true
    price?: true
    stock?: true
    potSize?: true
  }

  export type PlantCountAggregateInputType = {
    id?: true
    name?: true
    typeId?: true
    description?: true
    dimensions?: true
    price?: true
    stock?: true
    potSize?: true
    _all?: true
  }

  export type PlantAggregateArgs = {
    /**
     * Filter which Plant to aggregate.
    **/
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
    **/
    orderBy?: Enumerable<PlantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plants
    **/
    count?: true | PlantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PlantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PlantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PlantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PlantMaxAggregateInputType
  }

  export type GetPlantAggregateType<T extends PlantAggregateArgs> = {
    [P in keyof T & keyof AggregatePlant]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlant[P]>
      : GetScalarType<T[P], AggregatePlant[P]>
  }



  export type PlantSelect = {
    id?: boolean
    name?: boolean
    typeId?: boolean
    description?: boolean
    dimensions?: boolean
    price?: boolean
    stock?: boolean
    potSize?: boolean
    type?: boolean | PlantTypeArgs
    tags?: boolean | PlantTagFindManyArgs
    images?: boolean | ImageFindManyArgs
    orderItems?: boolean | OrderItemFindManyArgs
  }

  export type PlantInclude = {
    type?: boolean | PlantTypeArgs
    tags?: boolean | PlantTagFindManyArgs
    images?: boolean | ImageFindManyArgs
    orderItems?: boolean | OrderItemFindManyArgs
  }

  export type PlantGetPayload<
    S extends boolean | null | undefined | PlantArgs,
    U = keyof S
      > = S extends true
        ? Plant
    : S extends undefined
    ? never
    : S extends PlantArgs | PlantFindManyArgs
    ?'include' extends U
    ? Plant  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'type'
        ? PlantTypeGetPayload<S['include'][P]> :
        P extends 'tags'
        ? Array < PlantTagGetPayload<S['include'][P]>>  :
        P extends 'images'
        ? Array < ImageGetPayload<S['include'][P]>>  :
        P extends 'orderItems'
        ? Array < OrderItemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Plant ?Plant [P]
  : 
          P extends 'type'
        ? PlantTypeGetPayload<S['select'][P]> :
        P extends 'tags'
        ? Array < PlantTagGetPayload<S['select'][P]>>  :
        P extends 'images'
        ? Array < ImageGetPayload<S['select'][P]>>  :
        P extends 'orderItems'
        ? Array < OrderItemGetPayload<S['select'][P]>>  : never
  } 
    : Plant
  : Plant


  type PlantCountArgs = Merge<
    Omit<PlantFindManyArgs, 'select' | 'include'> & {
      select?: PlantCountAggregateInputType | true
    }
  >

  export interface PlantDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Plant that matches the filter.
     * @param {PlantFindUniqueArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Plant'> extends True ? CheckSelect<T, Prisma__PlantClient<Plant>, Prisma__PlantClient<PlantGetPayload<T>>> : CheckSelect<T, Prisma__PlantClient<Plant | null >, Prisma__PlantClient<PlantGetPayload<T> | null >>

    /**
     * Find the first Plant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFindFirstArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Plant'> extends True ? CheckSelect<T, Prisma__PlantClient<Plant>, Prisma__PlantClient<PlantGetPayload<T>>> : CheckSelect<T, Prisma__PlantClient<Plant | null >, Prisma__PlantClient<PlantGetPayload<T> | null >>

    /**
     * Find zero or more Plants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plants
     * const plants = await prisma.plant.findMany()
     * 
     * // Get first 10 Plants
     * const plants = await prisma.plant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantWithIdOnly = await prisma.plant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlantFindManyArgs>(
      args?: SelectSubset<T, PlantFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Plant>>, PrismaPromise<Array<PlantGetPayload<T>>>>

    /**
     * Create a Plant.
     * @param {PlantCreateArgs} args - Arguments to create a Plant.
     * @example
     * // Create one Plant
     * const Plant = await prisma.plant.create({
     *   data: {
     *     // ... data to create a Plant
     *   }
     * })
     * 
    **/
    create<T extends PlantCreateArgs>(
      args: SelectSubset<T, PlantCreateArgs>
    ): CheckSelect<T, Prisma__PlantClient<Plant>, Prisma__PlantClient<PlantGetPayload<T>>>

    /**
     * Delete a Plant.
     * @param {PlantDeleteArgs} args - Arguments to delete one Plant.
     * @example
     * // Delete one Plant
     * const Plant = await prisma.plant.delete({
     *   where: {
     *     // ... filter to delete one Plant
     *   }
     * })
     * 
    **/
    delete<T extends PlantDeleteArgs>(
      args: SelectSubset<T, PlantDeleteArgs>
    ): CheckSelect<T, Prisma__PlantClient<Plant>, Prisma__PlantClient<PlantGetPayload<T>>>

    /**
     * Update one Plant.
     * @param {PlantUpdateArgs} args - Arguments to update one Plant.
     * @example
     * // Update one Plant
     * const plant = await prisma.plant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlantUpdateArgs>(
      args: SelectSubset<T, PlantUpdateArgs>
    ): CheckSelect<T, Prisma__PlantClient<Plant>, Prisma__PlantClient<PlantGetPayload<T>>>

    /**
     * Delete zero or more Plants.
     * @param {PlantDeleteManyArgs} args - Arguments to filter Plants to delete.
     * @example
     * // Delete a few Plants
     * const { count } = await prisma.plant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlantDeleteManyArgs>(
      args?: SelectSubset<T, PlantDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plants
     * const plant = await prisma.plant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlantUpdateManyArgs>(
      args: SelectSubset<T, PlantUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Plant.
     * @param {PlantUpsertArgs} args - Arguments to update or create a Plant.
     * @example
     * // Update or create a Plant
     * const plant = await prisma.plant.upsert({
     *   create: {
     *     // ... data to create a Plant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plant we want to update
     *   }
     * })
    **/
    upsert<T extends PlantUpsertArgs>(
      args: SelectSubset<T, PlantUpsertArgs>
    ): CheckSelect<T, Prisma__PlantClient<Plant>, Prisma__PlantClient<PlantGetPayload<T>>>

    /**
     * Count the number of Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCountArgs} args - Arguments to filter Plants to count.
     * @example
     * // Count the number of Plants
     * const count = await prisma.plant.count({
     *   where: {
     *     // ... the filter for the Plants we want to count
     *   }
     * })
    **/
    count<T extends PlantCountArgs>(
      args?: Subset<T, PlantCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantAggregateArgs>(args: Subset<T, PlantAggregateArgs>): PrismaPromise<GetPlantAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Plant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlantClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    type<T extends PlantTypeArgs = {}>(args?: Subset<T, PlantTypeArgs>): CheckSelect<T, Prisma__PlantTypeClient<PlantType | null >, Prisma__PlantTypeClient<PlantTypeGetPayload<T> | null >>;

    tags<T extends PlantTagFindManyArgs = {}>(args?: Subset<T, PlantTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PlantTag>>, PrismaPromise<Array<PlantTagGetPayload<T>>>>;

    images<T extends ImageFindManyArgs = {}>(args?: Subset<T, ImageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>;

    orderItems<T extends OrderItemFindManyArgs = {}>(args?: Subset<T, OrderItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderItem>>, PrismaPromise<Array<OrderItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Plant findUnique
   */
  export type PlantFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * Throw an Error if a Plant can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Plant to fetch.
    **/
    where: PlantWhereUniqueInput
  }


  /**
   * Plant findFirst
   */
  export type PlantFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * Throw an Error if a Plant can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Plant to fetch.
    **/
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
    **/
    orderBy?: Enumerable<PlantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plants.
    **/
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plants.
    **/
    distinct?: Enumerable<PlantScalarFieldEnum>
  }


  /**
   * Plant findMany
   */
  export type PlantFindManyArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * Filter, which Plants to fetch.
    **/
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
    **/
    orderBy?: Enumerable<PlantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plants.
    **/
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
    **/
    skip?: number
    distinct?: Enumerable<PlantScalarFieldEnum>
  }


  /**
   * Plant create
   */
  export type PlantCreateArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * The data needed to create a Plant.
    **/
    data: XOR<PlantUncheckedCreateInput, PlantCreateInput>
  }


  /**
   * Plant update
   */
  export type PlantUpdateArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * The data needed to update a Plant.
    **/
    data: XOR<PlantUncheckedUpdateInput, PlantUpdateInput>
    /**
     * Choose, which Plant to update.
    **/
    where: PlantWhereUniqueInput
  }


  /**
   * Plant updateMany
   */
  export type PlantUpdateManyArgs = {
    data: XOR<PlantUncheckedUpdateManyInput, PlantUpdateManyMutationInput>
    where?: PlantWhereInput
  }


  /**
   * Plant upsert
   */
  export type PlantUpsertArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * The filter to search for the Plant to update in case it exists.
    **/
    where: PlantWhereUniqueInput
    /**
     * In case the Plant found by the `where` argument doesn't exist, create a new Plant with this data.
    **/
    create: XOR<PlantUncheckedCreateInput, PlantCreateInput>
    /**
     * In case the Plant was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PlantUncheckedUpdateInput, PlantUpdateInput>
  }


  /**
   * Plant delete
   */
  export type PlantDeleteArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
    /**
     * Filter which Plant to delete.
    **/
    where: PlantWhereUniqueInput
  }


  /**
   * Plant deleteMany
   */
  export type PlantDeleteManyArgs = {
    where?: PlantWhereInput
  }


  /**
   * Plant without action
   */
  export type PlantArgs = {
    /**
     * Select specific fields to fetch from the Plant
    **/
    select?: PlantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantInclude | null
  }



  /**
   * Model PlantType
   */


  export type AggregatePlantType = {
    count: PlantTypeCountAggregateOutputType | null
    avg: PlantTypeAvgAggregateOutputType | null
    sum: PlantTypeSumAggregateOutputType | null
    min: PlantTypeMinAggregateOutputType | null
    max: PlantTypeMaxAggregateOutputType | null
  }

  export type PlantTypeAvgAggregateOutputType = {
    id: number
  }

  export type PlantTypeSumAggregateOutputType = {
    id: number
  }

  export type PlantTypeMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type PlantTypeMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type PlantTypeCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type PlantTypeAvgAggregateInputType = {
    id?: true
  }

  export type PlantTypeSumAggregateInputType = {
    id?: true
  }

  export type PlantTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlantTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlantTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PlantTypeAggregateArgs = {
    /**
     * Filter which PlantType to aggregate.
    **/
    where?: PlantTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantTypes to fetch.
    **/
    orderBy?: Enumerable<PlantTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PlantTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantTypes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantTypes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantTypes
    **/
    count?: true | PlantTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PlantTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PlantTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PlantTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PlantTypeMaxAggregateInputType
  }

  export type GetPlantTypeAggregateType<T extends PlantTypeAggregateArgs> = {
    [P in keyof T & keyof AggregatePlantType]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantType[P]>
      : GetScalarType<T[P], AggregatePlantType[P]>
  }



  export type PlantTypeSelect = {
    id?: boolean
    name?: boolean
    plants?: boolean | PlantFindManyArgs
  }

  export type PlantTypeInclude = {
    plants?: boolean | PlantFindManyArgs
  }

  export type PlantTypeGetPayload<
    S extends boolean | null | undefined | PlantTypeArgs,
    U = keyof S
      > = S extends true
        ? PlantType
    : S extends undefined
    ? never
    : S extends PlantTypeArgs | PlantTypeFindManyArgs
    ?'include' extends U
    ? PlantType  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'plants'
        ? Array < PlantGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PlantType ?PlantType [P]
  : 
          P extends 'plants'
        ? Array < PlantGetPayload<S['select'][P]>>  : never
  } 
    : PlantType
  : PlantType


  type PlantTypeCountArgs = Merge<
    Omit<PlantTypeFindManyArgs, 'select' | 'include'> & {
      select?: PlantTypeCountAggregateInputType | true
    }
  >

  export interface PlantTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PlantType that matches the filter.
     * @param {PlantTypeFindUniqueArgs} args - Arguments to find a PlantType
     * @example
     * // Get one PlantType
     * const plantType = await prisma.plantType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlantTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlantTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PlantType'> extends True ? CheckSelect<T, Prisma__PlantTypeClient<PlantType>, Prisma__PlantTypeClient<PlantTypeGetPayload<T>>> : CheckSelect<T, Prisma__PlantTypeClient<PlantType | null >, Prisma__PlantTypeClient<PlantTypeGetPayload<T> | null >>

    /**
     * Find the first PlantType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTypeFindFirstArgs} args - Arguments to find a PlantType
     * @example
     * // Get one PlantType
     * const plantType = await prisma.plantType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlantTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlantTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PlantType'> extends True ? CheckSelect<T, Prisma__PlantTypeClient<PlantType>, Prisma__PlantTypeClient<PlantTypeGetPayload<T>>> : CheckSelect<T, Prisma__PlantTypeClient<PlantType | null >, Prisma__PlantTypeClient<PlantTypeGetPayload<T> | null >>

    /**
     * Find zero or more PlantTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantTypes
     * const plantTypes = await prisma.plantType.findMany()
     * 
     * // Get first 10 PlantTypes
     * const plantTypes = await prisma.plantType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantTypeWithIdOnly = await prisma.plantType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlantTypeFindManyArgs>(
      args?: SelectSubset<T, PlantTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PlantType>>, PrismaPromise<Array<PlantTypeGetPayload<T>>>>

    /**
     * Create a PlantType.
     * @param {PlantTypeCreateArgs} args - Arguments to create a PlantType.
     * @example
     * // Create one PlantType
     * const PlantType = await prisma.plantType.create({
     *   data: {
     *     // ... data to create a PlantType
     *   }
     * })
     * 
    **/
    create<T extends PlantTypeCreateArgs>(
      args: SelectSubset<T, PlantTypeCreateArgs>
    ): CheckSelect<T, Prisma__PlantTypeClient<PlantType>, Prisma__PlantTypeClient<PlantTypeGetPayload<T>>>

    /**
     * Delete a PlantType.
     * @param {PlantTypeDeleteArgs} args - Arguments to delete one PlantType.
     * @example
     * // Delete one PlantType
     * const PlantType = await prisma.plantType.delete({
     *   where: {
     *     // ... filter to delete one PlantType
     *   }
     * })
     * 
    **/
    delete<T extends PlantTypeDeleteArgs>(
      args: SelectSubset<T, PlantTypeDeleteArgs>
    ): CheckSelect<T, Prisma__PlantTypeClient<PlantType>, Prisma__PlantTypeClient<PlantTypeGetPayload<T>>>

    /**
     * Update one PlantType.
     * @param {PlantTypeUpdateArgs} args - Arguments to update one PlantType.
     * @example
     * // Update one PlantType
     * const plantType = await prisma.plantType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlantTypeUpdateArgs>(
      args: SelectSubset<T, PlantTypeUpdateArgs>
    ): CheckSelect<T, Prisma__PlantTypeClient<PlantType>, Prisma__PlantTypeClient<PlantTypeGetPayload<T>>>

    /**
     * Delete zero or more PlantTypes.
     * @param {PlantTypeDeleteManyArgs} args - Arguments to filter PlantTypes to delete.
     * @example
     * // Delete a few PlantTypes
     * const { count } = await prisma.plantType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlantTypeDeleteManyArgs>(
      args?: SelectSubset<T, PlantTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantTypes
     * const plantType = await prisma.plantType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlantTypeUpdateManyArgs>(
      args: SelectSubset<T, PlantTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantType.
     * @param {PlantTypeUpsertArgs} args - Arguments to update or create a PlantType.
     * @example
     * // Update or create a PlantType
     * const plantType = await prisma.plantType.upsert({
     *   create: {
     *     // ... data to create a PlantType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantType we want to update
     *   }
     * })
    **/
    upsert<T extends PlantTypeUpsertArgs>(
      args: SelectSubset<T, PlantTypeUpsertArgs>
    ): CheckSelect<T, Prisma__PlantTypeClient<PlantType>, Prisma__PlantTypeClient<PlantTypeGetPayload<T>>>

    /**
     * Count the number of PlantTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTypeCountArgs} args - Arguments to filter PlantTypes to count.
     * @example
     * // Count the number of PlantTypes
     * const count = await prisma.plantType.count({
     *   where: {
     *     // ... the filter for the PlantTypes we want to count
     *   }
     * })
    **/
    count<T extends PlantTypeCountArgs>(
      args?: Subset<T, PlantTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantTypeAggregateArgs>(args: Subset<T, PlantTypeAggregateArgs>): PrismaPromise<GetPlantTypeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlantTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    plants<T extends PlantFindManyArgs = {}>(args?: Subset<T, PlantFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Plant>>, PrismaPromise<Array<PlantGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PlantType findUnique
   */
  export type PlantTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * Throw an Error if a PlantType can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PlantType to fetch.
    **/
    where: PlantTypeWhereUniqueInput
  }


  /**
   * PlantType findFirst
   */
  export type PlantTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * Throw an Error if a PlantType can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PlantType to fetch.
    **/
    where?: PlantTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantTypes to fetch.
    **/
    orderBy?: Enumerable<PlantTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantTypes.
    **/
    cursor?: PlantTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantTypes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantTypes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantTypes.
    **/
    distinct?: Enumerable<PlantTypeScalarFieldEnum>
  }


  /**
   * PlantType findMany
   */
  export type PlantTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * Filter, which PlantTypes to fetch.
    **/
    where?: PlantTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantTypes to fetch.
    **/
    orderBy?: Enumerable<PlantTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantTypes.
    **/
    cursor?: PlantTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantTypes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantTypes.
    **/
    skip?: number
    distinct?: Enumerable<PlantTypeScalarFieldEnum>
  }


  /**
   * PlantType create
   */
  export type PlantTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * The data needed to create a PlantType.
    **/
    data: XOR<PlantTypeUncheckedCreateInput, PlantTypeCreateInput>
  }


  /**
   * PlantType update
   */
  export type PlantTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * The data needed to update a PlantType.
    **/
    data: XOR<PlantTypeUncheckedUpdateInput, PlantTypeUpdateInput>
    /**
     * Choose, which PlantType to update.
    **/
    where: PlantTypeWhereUniqueInput
  }


  /**
   * PlantType updateMany
   */
  export type PlantTypeUpdateManyArgs = {
    data: XOR<PlantTypeUncheckedUpdateManyInput, PlantTypeUpdateManyMutationInput>
    where?: PlantTypeWhereInput
  }


  /**
   * PlantType upsert
   */
  export type PlantTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * The filter to search for the PlantType to update in case it exists.
    **/
    where: PlantTypeWhereUniqueInput
    /**
     * In case the PlantType found by the `where` argument doesn't exist, create a new PlantType with this data.
    **/
    create: XOR<PlantTypeUncheckedCreateInput, PlantTypeCreateInput>
    /**
     * In case the PlantType was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PlantTypeUncheckedUpdateInput, PlantTypeUpdateInput>
  }


  /**
   * PlantType delete
   */
  export type PlantTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
    /**
     * Filter which PlantType to delete.
    **/
    where: PlantTypeWhereUniqueInput
  }


  /**
   * PlantType deleteMany
   */
  export type PlantTypeDeleteManyArgs = {
    where?: PlantTypeWhereInput
  }


  /**
   * PlantType without action
   */
  export type PlantTypeArgs = {
    /**
     * Select specific fields to fetch from the PlantType
    **/
    select?: PlantTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTypeInclude | null
  }



  /**
   * Model Image
   */


  export type AggregateImage = {
    count: ImageCountAggregateOutputType | null
    avg: ImageAvgAggregateOutputType | null
    sum: ImageSumAggregateOutputType | null
    min: ImageMinAggregateOutputType | null
    max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number
    plantId: number
    sequence: number
  }

  export type ImageSumAggregateOutputType = {
    id: number
    plantId: number
    sequence: number
  }

  export type ImageMinAggregateOutputType = {
    id: number
    plantId: number
    sequence: number
    url: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number
    plantId: number
    sequence: number
    url: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    plantId: number
    sequence: number
    url: number | null
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    plantId?: true
    sequence?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    plantId?: true
    sequence?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    plantId?: true
    sequence?: true
    url?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    plantId?: true
    sequence?: true
    url?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    plantId?: true
    sequence?: true
    url?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which Image to aggregate.
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
    **/
    orderBy?: Enumerable<ImageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
    [P in keyof T & keyof AggregateImage]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }



  export type ImageSelect = {
    id?: boolean
    plantId?: boolean
    sequence?: boolean
    url?: boolean
    plant?: boolean | PlantArgs
  }

  export type ImageInclude = {
    plant?: boolean | PlantArgs
  }

  export type ImageGetPayload<
    S extends boolean | null | undefined | ImageArgs,
    U = keyof S
      > = S extends true
        ? Image
    : S extends undefined
    ? never
    : S extends ImageArgs | ImageFindManyArgs
    ?'include' extends U
    ? Image  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'plant'
        ? PlantGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Image ?Image [P]
  : 
          P extends 'plant'
        ? PlantGetPayload<S['select'][P]> : never
  } 
    : Image
  : Image


  type ImageCountArgs = Merge<
    Omit<ImageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }
  >

  export interface ImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs>(
      args?: SelectSubset<T, ImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs>(
      args: SelectSubset<T, ImageCreateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs>(
      args: SelectSubset<T, ImageDeleteArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs>(
      args: SelectSubset<T, ImageUpdateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs>(
      args?: SelectSubset<T, ImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs>(
      args: SelectSubset<T, ImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs>(
      args: SelectSubset<T, ImageUpsertArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): PrismaPromise<GetImageAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    plant<T extends PlantArgs = {}>(args?: Subset<T, PlantArgs>): CheckSelect<T, Prisma__PlantClient<Plant | null >, Prisma__PlantClient<PlantGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
    **/
    orderBy?: Enumerable<ImageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Images to fetch.
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
    **/
    orderBy?: Enumerable<ImageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
    **/
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image create
   */
  export type ImageCreateArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * The data needed to create a Image.
    **/
    data: XOR<ImageUncheckedCreateInput, ImageCreateInput>
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * The data needed to update a Image.
    **/
    data: XOR<ImageUncheckedUpdateInput, ImageUpdateInput>
    /**
     * Choose, which Image to update.
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs = {
    data: XOR<ImageUncheckedUpdateManyInput, ImageUpdateManyMutationInput>
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * The filter to search for the Image to update in case it exists.
    **/
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
    **/
    create: XOR<ImageUncheckedCreateInput, ImageCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ImageUncheckedUpdateInput, ImageUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
    /**
     * Filter which Image to delete.
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs = {
    where?: ImageWhereInput
  }


  /**
   * Image without action
   */
  export type ImageArgs = {
    /**
     * Select specific fields to fetch from the Image
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ImageInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    count: TagCountAggregateOutputType | null
    avg: TagAvgAggregateOutputType | null
    sum: TagSumAggregateOutputType | null
    min: TagMinAggregateOutputType | null
    max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number
  }

  export type TagSumAggregateOutputType = {
    id: number
  }

  export type TagMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
    [P in keyof T & keyof AggregateTag]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }



  export type TagSelect = {
    id?: boolean
    name?: boolean
    plants?: boolean | PlantTagFindManyArgs
  }

  export type TagInclude = {
    plants?: boolean | PlantTagFindManyArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'plants'
        ? Array < PlantTagGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Tag ?Tag [P]
  : 
          P extends 'plants'
        ? Array < PlantTagGetPayload<S['select'][P]>>  : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    plants<T extends PlantTagFindManyArgs = {}>(args?: Subset<T, PlantTagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PlantTag>>, PrismaPromise<Array<PlantTagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
    **/
    data: XOR<TagUncheckedCreateInput, TagCreateInput>
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
    **/
    data: XOR<TagUncheckedUpdateInput, TagUpdateInput>
    /**
     * Choose, which Tag to update.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    data: XOR<TagUncheckedUpdateManyInput, TagUpdateManyMutationInput>
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
    **/
    create: XOR<TagUncheckedCreateInput, TagCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<TagUncheckedUpdateInput, TagUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    where?: TagWhereInput
  }


  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
  }



  /**
   * Model PlantTag
   */


  export type AggregatePlantTag = {
    count: PlantTagCountAggregateOutputType | null
    avg: PlantTagAvgAggregateOutputType | null
    sum: PlantTagSumAggregateOutputType | null
    min: PlantTagMinAggregateOutputType | null
    max: PlantTagMaxAggregateOutputType | null
  }

  export type PlantTagAvgAggregateOutputType = {
    id: number
    plantId: number
    tagId: number
  }

  export type PlantTagSumAggregateOutputType = {
    id: number
    plantId: number
    tagId: number
  }

  export type PlantTagMinAggregateOutputType = {
    id: number
    plantId: number
    tagId: number
  }

  export type PlantTagMaxAggregateOutputType = {
    id: number
    plantId: number
    tagId: number
  }

  export type PlantTagCountAggregateOutputType = {
    id: number
    plantId: number
    tagId: number
    _all: number
  }


  export type PlantTagAvgAggregateInputType = {
    id?: true
    plantId?: true
    tagId?: true
  }

  export type PlantTagSumAggregateInputType = {
    id?: true
    plantId?: true
    tagId?: true
  }

  export type PlantTagMinAggregateInputType = {
    id?: true
    plantId?: true
    tagId?: true
  }

  export type PlantTagMaxAggregateInputType = {
    id?: true
    plantId?: true
    tagId?: true
  }

  export type PlantTagCountAggregateInputType = {
    id?: true
    plantId?: true
    tagId?: true
    _all?: true
  }

  export type PlantTagAggregateArgs = {
    /**
     * Filter which PlantTag to aggregate.
    **/
    where?: PlantTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantTags to fetch.
    **/
    orderBy?: Enumerable<PlantTagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PlantTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantTags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantTags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantTags
    **/
    count?: true | PlantTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PlantTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PlantTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PlantTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PlantTagMaxAggregateInputType
  }

  export type GetPlantTagAggregateType<T extends PlantTagAggregateArgs> = {
    [P in keyof T & keyof AggregatePlantTag]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantTag[P]>
      : GetScalarType<T[P], AggregatePlantTag[P]>
  }



  export type PlantTagSelect = {
    id?: boolean
    plantId?: boolean
    plant?: boolean | PlantArgs
    tagId?: boolean
    tag?: boolean | TagArgs
  }

  export type PlantTagInclude = {
    plant?: boolean | PlantArgs
    tag?: boolean | TagArgs
  }

  export type PlantTagGetPayload<
    S extends boolean | null | undefined | PlantTagArgs,
    U = keyof S
      > = S extends true
        ? PlantTag
    : S extends undefined
    ? never
    : S extends PlantTagArgs | PlantTagFindManyArgs
    ?'include' extends U
    ? PlantTag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'plant'
        ? PlantGetPayload<S['include'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PlantTag ?PlantTag [P]
  : 
          P extends 'plant'
        ? PlantGetPayload<S['select'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['select'][P]> : never
  } 
    : PlantTag
  : PlantTag


  type PlantTagCountArgs = Merge<
    Omit<PlantTagFindManyArgs, 'select' | 'include'> & {
      select?: PlantTagCountAggregateInputType | true
    }
  >

  export interface PlantTagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PlantTag that matches the filter.
     * @param {PlantTagFindUniqueArgs} args - Arguments to find a PlantTag
     * @example
     * // Get one PlantTag
     * const plantTag = await prisma.plantTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlantTagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlantTagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PlantTag'> extends True ? CheckSelect<T, Prisma__PlantTagClient<PlantTag>, Prisma__PlantTagClient<PlantTagGetPayload<T>>> : CheckSelect<T, Prisma__PlantTagClient<PlantTag | null >, Prisma__PlantTagClient<PlantTagGetPayload<T> | null >>

    /**
     * Find the first PlantTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTagFindFirstArgs} args - Arguments to find a PlantTag
     * @example
     * // Get one PlantTag
     * const plantTag = await prisma.plantTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlantTagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlantTagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PlantTag'> extends True ? CheckSelect<T, Prisma__PlantTagClient<PlantTag>, Prisma__PlantTagClient<PlantTagGetPayload<T>>> : CheckSelect<T, Prisma__PlantTagClient<PlantTag | null >, Prisma__PlantTagClient<PlantTagGetPayload<T> | null >>

    /**
     * Find zero or more PlantTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantTags
     * const plantTags = await prisma.plantTag.findMany()
     * 
     * // Get first 10 PlantTags
     * const plantTags = await prisma.plantTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantTagWithIdOnly = await prisma.plantTag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlantTagFindManyArgs>(
      args?: SelectSubset<T, PlantTagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PlantTag>>, PrismaPromise<Array<PlantTagGetPayload<T>>>>

    /**
     * Create a PlantTag.
     * @param {PlantTagCreateArgs} args - Arguments to create a PlantTag.
     * @example
     * // Create one PlantTag
     * const PlantTag = await prisma.plantTag.create({
     *   data: {
     *     // ... data to create a PlantTag
     *   }
     * })
     * 
    **/
    create<T extends PlantTagCreateArgs>(
      args: SelectSubset<T, PlantTagCreateArgs>
    ): CheckSelect<T, Prisma__PlantTagClient<PlantTag>, Prisma__PlantTagClient<PlantTagGetPayload<T>>>

    /**
     * Delete a PlantTag.
     * @param {PlantTagDeleteArgs} args - Arguments to delete one PlantTag.
     * @example
     * // Delete one PlantTag
     * const PlantTag = await prisma.plantTag.delete({
     *   where: {
     *     // ... filter to delete one PlantTag
     *   }
     * })
     * 
    **/
    delete<T extends PlantTagDeleteArgs>(
      args: SelectSubset<T, PlantTagDeleteArgs>
    ): CheckSelect<T, Prisma__PlantTagClient<PlantTag>, Prisma__PlantTagClient<PlantTagGetPayload<T>>>

    /**
     * Update one PlantTag.
     * @param {PlantTagUpdateArgs} args - Arguments to update one PlantTag.
     * @example
     * // Update one PlantTag
     * const plantTag = await prisma.plantTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlantTagUpdateArgs>(
      args: SelectSubset<T, PlantTagUpdateArgs>
    ): CheckSelect<T, Prisma__PlantTagClient<PlantTag>, Prisma__PlantTagClient<PlantTagGetPayload<T>>>

    /**
     * Delete zero or more PlantTags.
     * @param {PlantTagDeleteManyArgs} args - Arguments to filter PlantTags to delete.
     * @example
     * // Delete a few PlantTags
     * const { count } = await prisma.plantTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlantTagDeleteManyArgs>(
      args?: SelectSubset<T, PlantTagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantTags
     * const plantTag = await prisma.plantTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlantTagUpdateManyArgs>(
      args: SelectSubset<T, PlantTagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantTag.
     * @param {PlantTagUpsertArgs} args - Arguments to update or create a PlantTag.
     * @example
     * // Update or create a PlantTag
     * const plantTag = await prisma.plantTag.upsert({
     *   create: {
     *     // ... data to create a PlantTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantTag we want to update
     *   }
     * })
    **/
    upsert<T extends PlantTagUpsertArgs>(
      args: SelectSubset<T, PlantTagUpsertArgs>
    ): CheckSelect<T, Prisma__PlantTagClient<PlantTag>, Prisma__PlantTagClient<PlantTagGetPayload<T>>>

    /**
     * Count the number of PlantTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTagCountArgs} args - Arguments to filter PlantTags to count.
     * @example
     * // Count the number of PlantTags
     * const count = await prisma.plantTag.count({
     *   where: {
     *     // ... the filter for the PlantTags we want to count
     *   }
     * })
    **/
    count<T extends PlantTagCountArgs>(
      args?: Subset<T, PlantTagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantTagAggregateArgs>(args: Subset<T, PlantTagAggregateArgs>): PrismaPromise<GetPlantTagAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlantTagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    plant<T extends PlantArgs = {}>(args?: Subset<T, PlantArgs>): CheckSelect<T, Prisma__PlantClient<Plant | null >, Prisma__PlantClient<PlantGetPayload<T> | null >>;

    tag<T extends TagArgs = {}>(args?: Subset<T, TagArgs>): CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PlantTag findUnique
   */
  export type PlantTagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * Throw an Error if a PlantTag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PlantTag to fetch.
    **/
    where: PlantTagWhereUniqueInput
  }


  /**
   * PlantTag findFirst
   */
  export type PlantTagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * Throw an Error if a PlantTag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PlantTag to fetch.
    **/
    where?: PlantTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantTags to fetch.
    **/
    orderBy?: Enumerable<PlantTagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantTags.
    **/
    cursor?: PlantTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantTags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantTags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantTags.
    **/
    distinct?: Enumerable<PlantTagScalarFieldEnum>
  }


  /**
   * PlantTag findMany
   */
  export type PlantTagFindManyArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * Filter, which PlantTags to fetch.
    **/
    where?: PlantTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantTags to fetch.
    **/
    orderBy?: Enumerable<PlantTagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantTags.
    **/
    cursor?: PlantTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantTags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantTags.
    **/
    skip?: number
    distinct?: Enumerable<PlantTagScalarFieldEnum>
  }


  /**
   * PlantTag create
   */
  export type PlantTagCreateArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * The data needed to create a PlantTag.
    **/
    data: XOR<PlantTagUncheckedCreateInput, PlantTagCreateInput>
  }


  /**
   * PlantTag update
   */
  export type PlantTagUpdateArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * The data needed to update a PlantTag.
    **/
    data: XOR<PlantTagUncheckedUpdateInput, PlantTagUpdateInput>
    /**
     * Choose, which PlantTag to update.
    **/
    where: PlantTagWhereUniqueInput
  }


  /**
   * PlantTag updateMany
   */
  export type PlantTagUpdateManyArgs = {
    data: XOR<PlantTagUncheckedUpdateManyInput, PlantTagUpdateManyMutationInput>
    where?: PlantTagWhereInput
  }


  /**
   * PlantTag upsert
   */
  export type PlantTagUpsertArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * The filter to search for the PlantTag to update in case it exists.
    **/
    where: PlantTagWhereUniqueInput
    /**
     * In case the PlantTag found by the `where` argument doesn't exist, create a new PlantTag with this data.
    **/
    create: XOR<PlantTagUncheckedCreateInput, PlantTagCreateInput>
    /**
     * In case the PlantTag was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PlantTagUncheckedUpdateInput, PlantTagUpdateInput>
  }


  /**
   * PlantTag delete
   */
  export type PlantTagDeleteArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
    /**
     * Filter which PlantTag to delete.
    **/
    where: PlantTagWhereUniqueInput
  }


  /**
   * PlantTag deleteMany
   */
  export type PlantTagDeleteManyArgs = {
    where?: PlantTagWhereInput
  }


  /**
   * PlantTag without action
   */
  export type PlantTagArgs = {
    /**
     * Select specific fields to fetch from the PlantTag
    **/
    select?: PlantTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PlantTagInclude | null
  }



  /**
   * Model Theme
   */


  export type AggregateTheme = {
    count: ThemeCountAggregateOutputType | null
    avg: ThemeAvgAggregateOutputType | null
    sum: ThemeSumAggregateOutputType | null
    min: ThemeMinAggregateOutputType | null
    max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeAvgAggregateOutputType = {
    id: number
    headliner1: number | null
    headliner2: number | null
    headliner3: number | null
  }

  export type ThemeSumAggregateOutputType = {
    id: number
    headliner1: number | null
    headliner2: number | null
    headliner3: number | null
  }

  export type ThemeMinAggregateOutputType = {
    id: number
    headliner1: number | null
    headliner2: number | null
    headliner3: number | null
    coverPicture1: string | null
    coverPicture2: string | null
    coverPicture3: string | null
    coverPicture4: string | null
    coverPicture5: string | null
    mainText1: string | null
    mainText2: string | null
    mainText3: string | null
  }

  export type ThemeMaxAggregateOutputType = {
    id: number
    headliner1: number | null
    headliner2: number | null
    headliner3: number | null
    coverPicture1: string | null
    coverPicture2: string | null
    coverPicture3: string | null
    coverPicture4: string | null
    coverPicture5: string | null
    mainText1: string | null
    mainText2: string | null
    mainText3: string | null
  }

  export type ThemeCountAggregateOutputType = {
    id: number
    headliner1: number | null
    headliner2: number | null
    headliner3: number | null
    coverPicture1: number | null
    coverPicture2: number | null
    coverPicture3: number | null
    coverPicture4: number | null
    coverPicture5: number | null
    mainText1: number | null
    mainText2: number | null
    mainText3: number | null
    _all: number
  }


  export type ThemeAvgAggregateInputType = {
    id?: true
    headliner1?: true
    headliner2?: true
    headliner3?: true
  }

  export type ThemeSumAggregateInputType = {
    id?: true
    headliner1?: true
    headliner2?: true
    headliner3?: true
  }

  export type ThemeMinAggregateInputType = {
    id?: true
    headliner1?: true
    headliner2?: true
    headliner3?: true
    coverPicture1?: true
    coverPicture2?: true
    coverPicture3?: true
    coverPicture4?: true
    coverPicture5?: true
    mainText1?: true
    mainText2?: true
    mainText3?: true
  }

  export type ThemeMaxAggregateInputType = {
    id?: true
    headliner1?: true
    headliner2?: true
    headliner3?: true
    coverPicture1?: true
    coverPicture2?: true
    coverPicture3?: true
    coverPicture4?: true
    coverPicture5?: true
    mainText1?: true
    mainText2?: true
    mainText3?: true
  }

  export type ThemeCountAggregateInputType = {
    id?: true
    headliner1?: true
    headliner2?: true
    headliner3?: true
    coverPicture1?: true
    coverPicture2?: true
    coverPicture3?: true
    coverPicture4?: true
    coverPicture5?: true
    mainText1?: true
    mainText2?: true
    mainText3?: true
    _all?: true
  }

  export type ThemeAggregateArgs = {
    /**
     * Filter which Theme to aggregate.
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
    **/
    orderBy?: Enumerable<ThemeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ThemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ThemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
    [P in keyof T & keyof AggregateTheme]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }



  export type ThemeSelect = {
    id?: boolean
    headliner1?: boolean
    headliner2?: boolean
    headliner3?: boolean
    coverPicture1?: boolean
    coverPicture2?: boolean
    coverPicture3?: boolean
    coverPicture4?: boolean
    coverPicture5?: boolean
    mainText1?: boolean
    mainText2?: boolean
    mainText3?: boolean
  }

  export type ThemeGetPayload<
    S extends boolean | null | undefined | ThemeArgs,
    U = keyof S
      > = S extends true
        ? Theme
    : S extends undefined
    ? never
    : S extends ThemeArgs | ThemeFindManyArgs
    ?'include' extends U
    ? Theme 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Theme ?Theme [P]
  : 
     never
  } 
    : Theme
  : Theme


  type ThemeCountArgs = Merge<
    Omit<ThemeFindManyArgs, 'select' | 'include'> & {
      select?: ThemeCountAggregateInputType | true
    }
  >

  export interface ThemeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThemeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ThemeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Theme'> extends True ? CheckSelect<T, Prisma__ThemeClient<Theme>, Prisma__ThemeClient<ThemeGetPayload<T>>> : CheckSelect<T, Prisma__ThemeClient<Theme | null >, Prisma__ThemeClient<ThemeGetPayload<T> | null >>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThemeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ThemeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Theme'> extends True ? CheckSelect<T, Prisma__ThemeClient<Theme>, Prisma__ThemeClient<ThemeGetPayload<T>>> : CheckSelect<T, Prisma__ThemeClient<Theme | null >, Prisma__ThemeClient<ThemeGetPayload<T> | null >>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWithIdOnly = await prisma.theme.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThemeFindManyArgs>(
      args?: SelectSubset<T, ThemeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Theme>>, PrismaPromise<Array<ThemeGetPayload<T>>>>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
    **/
    create<T extends ThemeCreateArgs>(
      args: SelectSubset<T, ThemeCreateArgs>
    ): CheckSelect<T, Prisma__ThemeClient<Theme>, Prisma__ThemeClient<ThemeGetPayload<T>>>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
    **/
    delete<T extends ThemeDeleteArgs>(
      args: SelectSubset<T, ThemeDeleteArgs>
    ): CheckSelect<T, Prisma__ThemeClient<Theme>, Prisma__ThemeClient<ThemeGetPayload<T>>>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThemeUpdateArgs>(
      args: SelectSubset<T, ThemeUpdateArgs>
    ): CheckSelect<T, Prisma__ThemeClient<Theme>, Prisma__ThemeClient<ThemeGetPayload<T>>>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThemeDeleteManyArgs>(
      args?: SelectSubset<T, ThemeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThemeUpdateManyArgs>(
      args: SelectSubset<T, ThemeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
    **/
    upsert<T extends ThemeUpsertArgs>(
      args: SelectSubset<T, ThemeUpsertArgs>
    ): CheckSelect<T, Prisma__ThemeClient<Theme>, Prisma__ThemeClient<ThemeGetPayload<T>>>

    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): PrismaPromise<GetThemeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ThemeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Theme findUnique
   */
  export type ThemeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * Throw an Error if a Theme can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Theme to fetch.
    **/
    where: ThemeWhereUniqueInput
  }


  /**
   * Theme findFirst
   */
  export type ThemeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * Throw an Error if a Theme can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Theme to fetch.
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
    **/
    orderBy?: Enumerable<ThemeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
    **/
    distinct?: Enumerable<ThemeScalarFieldEnum>
  }


  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * Filter, which Themes to fetch.
    **/
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
    **/
    orderBy?: Enumerable<ThemeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
    **/
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
    **/
    skip?: number
    distinct?: Enumerable<ThemeScalarFieldEnum>
  }


  /**
   * Theme create
   */
  export type ThemeCreateArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * The data needed to create a Theme.
    **/
    data: XOR<ThemeUncheckedCreateInput, ThemeCreateInput>
  }


  /**
   * Theme update
   */
  export type ThemeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * The data needed to update a Theme.
    **/
    data: XOR<ThemeUncheckedUpdateInput, ThemeUpdateInput>
    /**
     * Choose, which Theme to update.
    **/
    where: ThemeWhereUniqueInput
  }


  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs = {
    data: XOR<ThemeUncheckedUpdateManyInput, ThemeUpdateManyMutationInput>
    where?: ThemeWhereInput
  }


  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * The filter to search for the Theme to update in case it exists.
    **/
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
    **/
    create: XOR<ThemeUncheckedCreateInput, ThemeCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ThemeUncheckedUpdateInput, ThemeUpdateInput>
  }


  /**
   * Theme delete
   */
  export type ThemeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
    /**
     * Filter which Theme to delete.
    **/
    where: ThemeWhereUniqueInput
  }


  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs = {
    where?: ThemeWhereInput
  }


  /**
   * Theme without action
   */
  export type ThemeArgs = {
    /**
     * Select specific fields to fetch from the Theme
    **/
    select?: ThemeSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    hashedPassword: 'hashedPassword',
    addressStreet1: 'addressStreet1',
    addressStreet2: 'addressStreet2',
    addressCity: 'addressCity',
    addressRegion: 'addressRegion',
    addressZip: 'addressZip'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    userId: 'userId',
    total: 'total',
    dateTime: 'dateTime',
    promoCodeId: 'promoCodeId',
    addressStreet1: 'addressStreet1',
    addressStreet2: 'addressStreet2',
    addressCity: 'addressCity',
    addressRegion: 'addressRegion',
    addressZip: 'addressZip',
    status: 'status'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    orderId: 'orderId',
    plantId: 'plantId',
    quantity: 'quantity'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const PromoCodeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startDate: 'startDate',
    expirationDate: 'expirationDate'
  };

  export type PromoCodeScalarFieldEnum = (typeof PromoCodeScalarFieldEnum)[keyof typeof PromoCodeScalarFieldEnum]


  export const PlantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    typeId: 'typeId',
    description: 'description',
    dimensions: 'dimensions',
    price: 'price',
    stock: 'stock',
    potSize: 'potSize'
  };

  export type PlantScalarFieldEnum = (typeof PlantScalarFieldEnum)[keyof typeof PlantScalarFieldEnum]


  export const PlantTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PlantTypeScalarFieldEnum = (typeof PlantTypeScalarFieldEnum)[keyof typeof PlantTypeScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    plantId: 'plantId',
    sequence: 'sequence',
    url: 'url'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const PlantTagScalarFieldEnum: {
    id: 'id',
    plantId: 'plantId',
    tagId: 'tagId'
  };

  export type PlantTagScalarFieldEnum = (typeof PlantTagScalarFieldEnum)[keyof typeof PlantTagScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    id: 'id',
    headliner1: 'headliner1',
    headliner2: 'headliner2',
    headliner3: 'headliner3',
    coverPicture1: 'coverPicture1',
    coverPicture2: 'coverPicture2',
    coverPicture3: 'coverPicture3',
    coverPicture4: 'coverPicture4',
    coverPicture5: 'coverPicture5',
    mainText1: 'mainText1',
    mainText2: 'mainText2',
    mainText3: 'mainText3'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    phone?: IntNullableFilter | number | null
    hashedPassword?: StringFilter | string
    addressStreet1?: StringNullableFilter | string | null
    addressStreet2?: StringNullableFilter | string | null
    addressCity?: StringNullableFilter | string | null
    addressRegion?: StringNullableFilter | string | null
    addressZip?: IntNullableFilter | number | null
    orders?: OrderListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashedPassword?: SortOrder
    addressStreet1?: SortOrder
    addressStreet2?: SortOrder
    addressCity?: SortOrder
    addressRegion?: SortOrder
    addressZip?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type OrderWhereInput = {
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    id?: IntFilter | number
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    total?: DecimalFilter | Decimal | number | string
    dateTime?: DateTimeFilter | Date | string
    promoCodeId?: IntNullableFilter | number | null
    addressStreet1?: StringFilter | string
    addressStreet2?: StringNullableFilter | string | null
    addressCity?: StringFilter | string
    addressRegion?: StringFilter | string
    addressZip?: IntFilter | number
    status?: StringFilter | string
    promoCode?: XOR<PromoCodeWhereInput, PromoCodeRelationFilter> | null
    user?: XOR<UserWhereInput, UserRelationFilter>
    orderItems?: OrderItemListRelationFilter
  }

  export type OrderOrderByInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    total?: SortOrder
    dateTime?: SortOrder
    promoCodeId?: SortOrder
    addressStreet1?: SortOrder
    addressStreet2?: SortOrder
    addressCity?: SortOrder
    addressRegion?: SortOrder
    addressZip?: SortOrder
    status?: SortOrder
    promoCode?: PromoCodeOrderByInput
    user?: UserOrderByInput
  }

  export type OrderWhereUniqueInput = {
    id?: number
  }

  export type OrderItemWhereInput = {
    AND?: Enumerable<OrderItemWhereInput>
    OR?: Enumerable<OrderItemWhereInput>
    NOT?: Enumerable<OrderItemWhereInput>
    id?: IntFilter | number
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    orderId?: IntFilter | number
    plantId?: IntFilter | number
    quantity?: IntFilter | number
    order?: XOR<OrderWhereInput, OrderRelationFilter>
    plant?: XOR<PlantWhereInput, PlantRelationFilter>
  }

  export type OrderItemOrderByInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    plantId?: SortOrder
    quantity?: SortOrder
    order?: OrderOrderByInput
    plant?: PlantOrderByInput
  }

  export type OrderItemWhereUniqueInput = {
    id?: number
  }

  export type PromoCodeWhereInput = {
    AND?: Enumerable<PromoCodeWhereInput>
    OR?: Enumerable<PromoCodeWhereInput>
    NOT?: Enumerable<PromoCodeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    expirationDate?: DateTimeFilter | Date | string
    orders?: OrderListRelationFilter
  }

  export type PromoCodeOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    expirationDate?: SortOrder
  }

  export type PromoCodeWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type PlantWhereInput = {
    AND?: Enumerable<PlantWhereInput>
    OR?: Enumerable<PlantWhereInput>
    NOT?: Enumerable<PlantWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    typeId?: IntFilter | number
    description?: StringFilter | string
    dimensions?: StringFilter | string
    price?: DecimalFilter | Decimal | number | string
    stock?: IntFilter | number
    potSize?: StringFilter | string
    type?: XOR<PlantTypeWhereInput, PlantTypeRelationFilter>
    tags?: PlantTagListRelationFilter
    images?: ImageListRelationFilter
    orderItems?: OrderItemListRelationFilter
  }

  export type PlantOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    typeId?: SortOrder
    description?: SortOrder
    dimensions?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    potSize?: SortOrder
    type?: PlantTypeOrderByInput
  }

  export type PlantWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type PlantTypeWhereInput = {
    AND?: Enumerable<PlantTypeWhereInput>
    OR?: Enumerable<PlantTypeWhereInput>
    NOT?: Enumerable<PlantTypeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    plants?: PlantListRelationFilter
  }

  export type PlantTypeOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlantTypeWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type ImageWhereInput = {
    AND?: Enumerable<ImageWhereInput>
    OR?: Enumerable<ImageWhereInput>
    NOT?: Enumerable<ImageWhereInput>
    id?: IntFilter | number
    plantId?: IntFilter | number
    sequence?: IntFilter | number
    url?: StringFilter | string
    plant?: XOR<PlantWhereInput, PlantRelationFilter>
  }

  export type ImageOrderByInput = {
    id?: SortOrder
    plantId?: SortOrder
    sequence?: SortOrder
    url?: SortOrder
    plant?: PlantOrderByInput
  }

  export type ImageWhereUniqueInput = {
    id?: number
    url?: string
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    plants?: PlantTagListRelationFilter
  }

  export type TagOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type PlantTagWhereInput = {
    AND?: Enumerable<PlantTagWhereInput>
    OR?: Enumerable<PlantTagWhereInput>
    NOT?: Enumerable<PlantTagWhereInput>
    id?: IntFilter | number
    plantId?: IntFilter | number
    plant?: XOR<PlantWhereInput, PlantRelationFilter>
    tagId?: IntFilter | number
    tag?: XOR<TagWhereInput, TagRelationFilter>
  }

  export type PlantTagOrderByInput = {
    id?: SortOrder
    plantId?: SortOrder
    plant?: PlantOrderByInput
    tagId?: SortOrder
    tag?: TagOrderByInput
  }

  export type PlantTagWhereUniqueInput = {
    id?: number
  }

  export type ThemeWhereInput = {
    AND?: Enumerable<ThemeWhereInput>
    OR?: Enumerable<ThemeWhereInput>
    NOT?: Enumerable<ThemeWhereInput>
    id?: IntFilter | number
    headliner1?: IntNullableFilter | number | null
    headliner2?: IntNullableFilter | number | null
    headliner3?: IntNullableFilter | number | null
    coverPicture1?: StringNullableFilter | string | null
    coverPicture2?: StringNullableFilter | string | null
    coverPicture3?: StringNullableFilter | string | null
    coverPicture4?: StringNullableFilter | string | null
    coverPicture5?: StringNullableFilter | string | null
    mainText1?: StringNullableFilter | string | null
    mainText2?: StringNullableFilter | string | null
    mainText3?: StringNullableFilter | string | null
  }

  export type ThemeOrderByInput = {
    id?: SortOrder
    headliner1?: SortOrder
    headliner2?: SortOrder
    headliner3?: SortOrder
    coverPicture1?: SortOrder
    coverPicture2?: SortOrder
    coverPicture3?: SortOrder
    coverPicture4?: SortOrder
    coverPicture5?: SortOrder
    mainText1?: SortOrder
    mainText2?: SortOrder
    mainText3?: SortOrder
  }

  export type ThemeWhereUniqueInput = {
    id?: number
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    phone?: number | null
    hashedPassword: string
    addressStreet1?: string | null
    addressStreet2?: string | null
    addressCity?: string | null
    addressRegion?: string | null
    addressZip?: number | null
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    phone?: number | null
    hashedPassword: string
    addressStreet1?: string | null
    addressStreet2?: string | null
    addressCity?: string | null
    addressRegion?: string | null
    addressZip?: number | null
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    addressStreet1?: NullableStringFieldUpdateOperationsInput | string | null
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: NullableStringFieldUpdateOperationsInput | string | null
    addressRegion?: NullableStringFieldUpdateOperationsInput | string | null
    addressZip?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: OrderUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    addressStreet1?: NullableStringFieldUpdateOperationsInput | string | null
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: NullableStringFieldUpdateOperationsInput | string | null
    addressRegion?: NullableStringFieldUpdateOperationsInput | string | null
    addressZip?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: OrderUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    addressStreet1?: NullableStringFieldUpdateOperationsInput | string | null
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: NullableStringFieldUpdateOperationsInput | string | null
    addressRegion?: NullableStringFieldUpdateOperationsInput | string | null
    addressZip?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    addressStreet1?: NullableStringFieldUpdateOperationsInput | string | null
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: NullableStringFieldUpdateOperationsInput | string | null
    addressRegion?: NullableStringFieldUpdateOperationsInput | string | null
    addressZip?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderCreateInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    total: Decimal | number | string
    dateTime?: Date | string
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    promoCode?: PromoCodeCreateNestedOneWithoutOrdersInput
    user: UserCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    userId: number
    total: Decimal | number | string
    dateTime?: Date | string
    promoCodeId?: number | null
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    promoCode?: PromoCodeUpdateOneWithoutOrdersInput
    user?: UserUpdateOneRequiredWithoutOrdersInput
    orderItems?: OrderItemUpdateManyWithoutOrderInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    promoCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderInput
  }

  export type OrderUpdateManyMutationInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    promoCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemCreateInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    quantity: number
    order: OrderCreateNestedOneWithoutOrderItemsInput
    plant: PlantCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    orderId: number
    plantId: number
    quantity: number
  }

  export type OrderItemUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderItemsInput
    plant?: PlantUpdateOneRequiredWithoutOrderItemsInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUpdateManyMutationInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PromoCodeCreateInput = {
    name: string
    startDate?: Date | string
    expirationDate: Date | string
    orders?: OrderCreateNestedManyWithoutPromoCodeInput
  }

  export type PromoCodeUncheckedCreateInput = {
    id?: number
    name: string
    startDate?: Date | string
    expirationDate: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutPromoCodeInput
  }

  export type PromoCodeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutPromoCodeInput
  }

  export type PromoCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutPromoCodeInput
  }

  export type PromoCodeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromoCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantCreateInput = {
    name: string
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    type: PlantTypeCreateNestedOneWithoutPlantsInput
    tags?: PlantTagCreateNestedManyWithoutPlantInput
    images?: ImageCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateInput = {
    id?: number
    name: string
    typeId: number
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    tags?: PlantTagUncheckedCreateNestedManyWithoutPlantInput
    images?: ImageUncheckedCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    type?: PlantTypeUpdateOneRequiredWithoutPlantsInput
    tags?: PlantTagUpdateManyWithoutPlantInput
    images?: ImageUpdateManyWithoutPlantInput
    orderItems?: OrderItemUpdateManyWithoutPlantInput
  }

  export type PlantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    tags?: PlantTagUncheckedUpdateManyWithoutPlantInput
    images?: ImageUncheckedUpdateManyWithoutPlantInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutPlantInput
  }

  export type PlantUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
  }

  export type PlantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
  }

  export type PlantTypeCreateInput = {
    name: string
    plants?: PlantCreateNestedManyWithoutTypeInput
  }

  export type PlantTypeUncheckedCreateInput = {
    id?: number
    name: string
    plants?: PlantUncheckedCreateNestedManyWithoutTypeInput
  }

  export type PlantTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    plants?: PlantUpdateManyWithoutTypeInput
  }

  export type PlantTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plants?: PlantUncheckedUpdateManyWithoutTypeInput
  }

  export type PlantTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateInput = {
    sequence?: number
    url: string
    plant: PlantCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    plantId: number
    sequence?: number
    url: string
  }

  export type ImageUpdateInput = {
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    plant?: PlantUpdateOneRequiredWithoutImagesInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUpdateManyMutationInput = {
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    name: string
    plants?: PlantTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    name: string
    plants?: PlantTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    plants?: PlantTagUpdateManyWithoutTagInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plants?: PlantTagUncheckedUpdateManyWithoutTagInput
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantTagCreateInput = {
    plant: PlantCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutPlantsInput
  }

  export type PlantTagUncheckedCreateInput = {
    id?: number
    plantId: number
    tagId: number
  }

  export type PlantTagUpdateInput = {
    plant?: PlantUpdateOneRequiredWithoutTagsInput
    tag?: TagUpdateOneRequiredWithoutPlantsInput
  }

  export type PlantTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type PlantTagUpdateManyMutationInput = {

  }

  export type PlantTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ThemeCreateInput = {
    headliner1?: number | null
    headliner2?: number | null
    headliner3?: number | null
    coverPicture1?: string | null
    coverPicture2?: string | null
    coverPicture3?: string | null
    coverPicture4?: string | null
    coverPicture5?: string | null
    mainText1?: string | null
    mainText2?: string | null
    mainText3?: string | null
  }

  export type ThemeUncheckedCreateInput = {
    id?: number
    headliner1?: number | null
    headliner2?: number | null
    headliner3?: number | null
    coverPicture1?: string | null
    coverPicture2?: string | null
    coverPicture3?: string | null
    coverPicture4?: string | null
    coverPicture5?: string | null
    mainText1?: string | null
    mainText2?: string | null
    mainText3?: string | null
  }

  export type ThemeUpdateInput = {
    headliner1?: NullableIntFieldUpdateOperationsInput | number | null
    headliner2?: NullableIntFieldUpdateOperationsInput | number | null
    headliner3?: NullableIntFieldUpdateOperationsInput | number | null
    coverPicture1?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture2?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture3?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture4?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture5?: NullableStringFieldUpdateOperationsInput | string | null
    mainText1?: NullableStringFieldUpdateOperationsInput | string | null
    mainText2?: NullableStringFieldUpdateOperationsInput | string | null
    mainText3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    headliner1?: NullableIntFieldUpdateOperationsInput | number | null
    headliner2?: NullableIntFieldUpdateOperationsInput | number | null
    headliner3?: NullableIntFieldUpdateOperationsInput | number | null
    coverPicture1?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture2?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture3?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture4?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture5?: NullableStringFieldUpdateOperationsInput | string | null
    mainText1?: NullableStringFieldUpdateOperationsInput | string | null
    mainText2?: NullableStringFieldUpdateOperationsInput | string | null
    mainText3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeUpdateManyMutationInput = {
    headliner1?: NullableIntFieldUpdateOperationsInput | number | null
    headliner2?: NullableIntFieldUpdateOperationsInput | number | null
    headliner3?: NullableIntFieldUpdateOperationsInput | number | null
    coverPicture1?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture2?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture3?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture4?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture5?: NullableStringFieldUpdateOperationsInput | string | null
    mainText1?: NullableStringFieldUpdateOperationsInput | string | null
    mainText2?: NullableStringFieldUpdateOperationsInput | string | null
    mainText3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    headliner1?: NullableIntFieldUpdateOperationsInput | number | null
    headliner2?: NullableIntFieldUpdateOperationsInput | number | null
    headliner3?: NullableIntFieldUpdateOperationsInput | number | null
    coverPicture1?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture2?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture3?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture4?: NullableStringFieldUpdateOperationsInput | string | null
    coverPicture5?: NullableStringFieldUpdateOperationsInput | string | null
    mainText1?: NullableStringFieldUpdateOperationsInput | string | null
    mainText2?: NullableStringFieldUpdateOperationsInput | string | null
    mainText3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type DecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type PromoCodeRelationFilter = {
    is?: PromoCodeWhereInput | null
    isNot?: PromoCodeWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type PlantRelationFilter = {
    is?: PlantWhereInput
    isNot?: PlantWhereInput
  }

  export type PlantTypeRelationFilter = {
    is?: PlantTypeWhereInput
    isNot?: PlantTypeWhereInput
  }

  export type PlantTagListRelationFilter = {
    every?: PlantTagWhereInput
    some?: PlantTagWhereInput
    none?: PlantTagWhereInput
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type PlantListRelationFilter = {
    every?: PlantWhereInput
    some?: PlantWhereInput
    none?: PlantWhereInput
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutUserInput>, Enumerable<OrderCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutUserInput>, Enumerable<OrderCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OrderUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutUserInput>, Enumerable<OrderCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutUserInput>, Enumerable<OrderCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type PromoCodeCreateNestedOneWithoutOrdersInput = {
    create?: XOR<PromoCodeUncheckedCreateWithoutOrdersInput, PromoCodeCreateWithoutOrdersInput>
    connectOrCreate?: PromoCodeCreateOrConnectWithoutOrdersInput
    connect?: PromoCodeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserUncheckedCreateWithoutOrdersInput, UserCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutOrderInput>, Enumerable<OrderItemCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutOrderInput>, Enumerable<OrderItemCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | number | string
    increment?: Decimal | number | string
    decrement?: Decimal | number | string
    multiply?: Decimal | number | string
    divide?: Decimal | number | string
  }

  export type PromoCodeUpdateOneWithoutOrdersInput = {
    create?: XOR<PromoCodeUncheckedCreateWithoutOrdersInput, PromoCodeCreateWithoutOrdersInput>
    connectOrCreate?: PromoCodeCreateOrConnectWithoutOrdersInput
    upsert?: PromoCodeUpsertWithoutOrdersInput
    connect?: PromoCodeWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PromoCodeUncheckedUpdateWithoutOrdersInput, PromoCodeUpdateWithoutOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutOrdersInput = {
    create?: XOR<UserUncheckedCreateWithoutOrdersInput, UserCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUncheckedUpdateWithoutOrdersInput, UserUpdateWithoutOrdersInput>
  }

  export type OrderItemUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutOrderInput>, Enumerable<OrderItemCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutOrderInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutOrderInput>, Enumerable<OrderItemCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutOrderInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type OrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderUncheckedCreateWithoutOrderItemsInput, OrderCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type PlantCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<PlantUncheckedCreateWithoutOrderItemsInput, PlantCreateWithoutOrderItemsInput>
    connectOrCreate?: PlantCreateOrConnectWithoutOrderItemsInput
    connect?: PlantWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderItemsInput = {
    create?: XOR<OrderUncheckedCreateWithoutOrderItemsInput, OrderCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderUpsertWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUncheckedUpdateWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>
  }

  export type PlantUpdateOneRequiredWithoutOrderItemsInput = {
    create?: XOR<PlantUncheckedCreateWithoutOrderItemsInput, PlantCreateWithoutOrderItemsInput>
    connectOrCreate?: PlantCreateOrConnectWithoutOrderItemsInput
    upsert?: PlantUpsertWithoutOrderItemsInput
    connect?: PlantWhereUniqueInput
    update?: XOR<PlantUncheckedUpdateWithoutOrderItemsInput, PlantUpdateWithoutOrderItemsInput>
  }

  export type OrderCreateNestedManyWithoutPromoCodeInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutPromoCodeInput>, Enumerable<OrderCreateWithoutPromoCodeInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutPromoCodeInput>
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutPromoCodeInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutPromoCodeInput>, Enumerable<OrderCreateWithoutPromoCodeInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutPromoCodeInput>
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type OrderUpdateManyWithoutPromoCodeInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutPromoCodeInput>, Enumerable<OrderCreateWithoutPromoCodeInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutPromoCodeInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutPromoCodeInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutPromoCodeInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutPromoCodeInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutPromoCodeInput = {
    create?: XOR<Enumerable<OrderUncheckedCreateWithoutPromoCodeInput>, Enumerable<OrderCreateWithoutPromoCodeInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutPromoCodeInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutPromoCodeInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutPromoCodeInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutPromoCodeInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type PlantTypeCreateNestedOneWithoutPlantsInput = {
    create?: XOR<PlantTypeUncheckedCreateWithoutPlantsInput, PlantTypeCreateWithoutPlantsInput>
    connectOrCreate?: PlantTypeCreateOrConnectWithoutPlantsInput
    connect?: PlantTypeWhereUniqueInput
  }

  export type PlantTagCreateNestedManyWithoutPlantInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutPlantInput>, Enumerable<PlantTagCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutPlantInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
  }

  export type ImageCreateNestedManyWithoutPlantInput = {
    create?: XOR<Enumerable<ImageUncheckedCreateWithoutPlantInput>, Enumerable<ImageCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPlantInput>
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type OrderItemCreateNestedManyWithoutPlantInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutPlantInput>, Enumerable<OrderItemCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutPlantInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type PlantTagUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutPlantInput>, Enumerable<PlantTagCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutPlantInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
  }

  export type ImageUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<Enumerable<ImageUncheckedCreateWithoutPlantInput>, Enumerable<ImageCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPlantInput>
    connect?: Enumerable<ImageWhereUniqueInput>
  }

  export type OrderItemUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutPlantInput>, Enumerable<OrderItemCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutPlantInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
  }

  export type PlantTypeUpdateOneRequiredWithoutPlantsInput = {
    create?: XOR<PlantTypeUncheckedCreateWithoutPlantsInput, PlantTypeCreateWithoutPlantsInput>
    connectOrCreate?: PlantTypeCreateOrConnectWithoutPlantsInput
    upsert?: PlantTypeUpsertWithoutPlantsInput
    connect?: PlantTypeWhereUniqueInput
    update?: XOR<PlantTypeUncheckedUpdateWithoutPlantsInput, PlantTypeUpdateWithoutPlantsInput>
  }

  export type PlantTagUpdateManyWithoutPlantInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutPlantInput>, Enumerable<PlantTagCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutPlantInput>
    upsert?: Enumerable<PlantTagUpsertWithWhereUniqueWithoutPlantInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
    set?: Enumerable<PlantTagWhereUniqueInput>
    disconnect?: Enumerable<PlantTagWhereUniqueInput>
    delete?: Enumerable<PlantTagWhereUniqueInput>
    update?: Enumerable<PlantTagUpdateWithWhereUniqueWithoutPlantInput>
    updateMany?: Enumerable<PlantTagUpdateManyWithWhereWithoutPlantInput>
    deleteMany?: Enumerable<PlantTagScalarWhereInput>
  }

  export type ImageUpdateManyWithoutPlantInput = {
    create?: XOR<Enumerable<ImageUncheckedCreateWithoutPlantInput>, Enumerable<ImageCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPlantInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutPlantInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutPlantInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutPlantInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type OrderItemUpdateManyWithoutPlantInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutPlantInput>, Enumerable<OrderItemCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutPlantInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutPlantInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutPlantInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutPlantInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type PlantTagUncheckedUpdateManyWithoutPlantInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutPlantInput>, Enumerable<PlantTagCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutPlantInput>
    upsert?: Enumerable<PlantTagUpsertWithWhereUniqueWithoutPlantInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
    set?: Enumerable<PlantTagWhereUniqueInput>
    disconnect?: Enumerable<PlantTagWhereUniqueInput>
    delete?: Enumerable<PlantTagWhereUniqueInput>
    update?: Enumerable<PlantTagUpdateWithWhereUniqueWithoutPlantInput>
    updateMany?: Enumerable<PlantTagUpdateManyWithWhereWithoutPlantInput>
    deleteMany?: Enumerable<PlantTagScalarWhereInput>
  }

  export type ImageUncheckedUpdateManyWithoutPlantInput = {
    create?: XOR<Enumerable<ImageUncheckedCreateWithoutPlantInput>, Enumerable<ImageCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<ImageCreateOrConnectWithoutPlantInput>
    upsert?: Enumerable<ImageUpsertWithWhereUniqueWithoutPlantInput>
    connect?: Enumerable<ImageWhereUniqueInput>
    set?: Enumerable<ImageWhereUniqueInput>
    disconnect?: Enumerable<ImageWhereUniqueInput>
    delete?: Enumerable<ImageWhereUniqueInput>
    update?: Enumerable<ImageUpdateWithWhereUniqueWithoutPlantInput>
    updateMany?: Enumerable<ImageUpdateManyWithWhereWithoutPlantInput>
    deleteMany?: Enumerable<ImageScalarWhereInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutPlantInput = {
    create?: XOR<Enumerable<OrderItemUncheckedCreateWithoutPlantInput>, Enumerable<OrderItemCreateWithoutPlantInput>>
    connectOrCreate?: Enumerable<OrderItemCreateOrConnectWithoutPlantInput>
    upsert?: Enumerable<OrderItemUpsertWithWhereUniqueWithoutPlantInput>
    connect?: Enumerable<OrderItemWhereUniqueInput>
    set?: Enumerable<OrderItemWhereUniqueInput>
    disconnect?: Enumerable<OrderItemWhereUniqueInput>
    delete?: Enumerable<OrderItemWhereUniqueInput>
    update?: Enumerable<OrderItemUpdateWithWhereUniqueWithoutPlantInput>
    updateMany?: Enumerable<OrderItemUpdateManyWithWhereWithoutPlantInput>
    deleteMany?: Enumerable<OrderItemScalarWhereInput>
  }

  export type PlantCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<PlantUncheckedCreateWithoutTypeInput>, Enumerable<PlantCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<PlantCreateOrConnectWithoutTypeInput>
    connect?: Enumerable<PlantWhereUniqueInput>
  }

  export type PlantUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<PlantUncheckedCreateWithoutTypeInput>, Enumerable<PlantCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<PlantCreateOrConnectWithoutTypeInput>
    connect?: Enumerable<PlantWhereUniqueInput>
  }

  export type PlantUpdateManyWithoutTypeInput = {
    create?: XOR<Enumerable<PlantUncheckedCreateWithoutTypeInput>, Enumerable<PlantCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<PlantCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<PlantUpsertWithWhereUniqueWithoutTypeInput>
    connect?: Enumerable<PlantWhereUniqueInput>
    set?: Enumerable<PlantWhereUniqueInput>
    disconnect?: Enumerable<PlantWhereUniqueInput>
    delete?: Enumerable<PlantWhereUniqueInput>
    update?: Enumerable<PlantUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<PlantUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<PlantScalarWhereInput>
  }

  export type PlantUncheckedUpdateManyWithoutTypeInput = {
    create?: XOR<Enumerable<PlantUncheckedCreateWithoutTypeInput>, Enumerable<PlantCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<PlantCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<PlantUpsertWithWhereUniqueWithoutTypeInput>
    connect?: Enumerable<PlantWhereUniqueInput>
    set?: Enumerable<PlantWhereUniqueInput>
    disconnect?: Enumerable<PlantWhereUniqueInput>
    delete?: Enumerable<PlantWhereUniqueInput>
    update?: Enumerable<PlantUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<PlantUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<PlantScalarWhereInput>
  }

  export type PlantCreateNestedOneWithoutImagesInput = {
    create?: XOR<PlantUncheckedCreateWithoutImagesInput, PlantCreateWithoutImagesInput>
    connectOrCreate?: PlantCreateOrConnectWithoutImagesInput
    connect?: PlantWhereUniqueInput
  }

  export type PlantUpdateOneRequiredWithoutImagesInput = {
    create?: XOR<PlantUncheckedCreateWithoutImagesInput, PlantCreateWithoutImagesInput>
    connectOrCreate?: PlantCreateOrConnectWithoutImagesInput
    upsert?: PlantUpsertWithoutImagesInput
    connect?: PlantWhereUniqueInput
    update?: XOR<PlantUncheckedUpdateWithoutImagesInput, PlantUpdateWithoutImagesInput>
  }

  export type PlantTagCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutTagInput>, Enumerable<PlantTagCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutTagInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
  }

  export type PlantTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutTagInput>, Enumerable<PlantTagCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutTagInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
  }

  export type PlantTagUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutTagInput>, Enumerable<PlantTagCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<PlantTagUpsertWithWhereUniqueWithoutTagInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
    set?: Enumerable<PlantTagWhereUniqueInput>
    disconnect?: Enumerable<PlantTagWhereUniqueInput>
    delete?: Enumerable<PlantTagWhereUniqueInput>
    update?: Enumerable<PlantTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<PlantTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<PlantTagScalarWhereInput>
  }

  export type PlantTagUncheckedUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<PlantTagUncheckedCreateWithoutTagInput>, Enumerable<PlantTagCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<PlantTagCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<PlantTagUpsertWithWhereUniqueWithoutTagInput>
    connect?: Enumerable<PlantTagWhereUniqueInput>
    set?: Enumerable<PlantTagWhereUniqueInput>
    disconnect?: Enumerable<PlantTagWhereUniqueInput>
    delete?: Enumerable<PlantTagWhereUniqueInput>
    update?: Enumerable<PlantTagUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<PlantTagUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<PlantTagScalarWhereInput>
  }

  export type PlantCreateNestedOneWithoutTagsInput = {
    create?: XOR<PlantUncheckedCreateWithoutTagsInput, PlantCreateWithoutTagsInput>
    connectOrCreate?: PlantCreateOrConnectWithoutTagsInput
    connect?: PlantWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutPlantsInput = {
    create?: XOR<TagUncheckedCreateWithoutPlantsInput, TagCreateWithoutPlantsInput>
    connectOrCreate?: TagCreateOrConnectWithoutPlantsInput
    connect?: TagWhereUniqueInput
  }

  export type PlantUpdateOneRequiredWithoutTagsInput = {
    create?: XOR<PlantUncheckedCreateWithoutTagsInput, PlantCreateWithoutTagsInput>
    connectOrCreate?: PlantCreateOrConnectWithoutTagsInput
    upsert?: PlantUpsertWithoutTagsInput
    connect?: PlantWhereUniqueInput
    update?: XOR<PlantUncheckedUpdateWithoutTagsInput, PlantUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutPlantsInput = {
    create?: XOR<TagUncheckedCreateWithoutPlantsInput, TagCreateWithoutPlantsInput>
    connectOrCreate?: TagCreateOrConnectWithoutPlantsInput
    upsert?: TagUpsertWithoutPlantsInput
    connect?: TagWhereUniqueInput
    update?: XOR<TagUncheckedUpdateWithoutPlantsInput, TagUpdateWithoutPlantsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | number | string
    in?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | number | string
    lte?: Decimal | number | string
    gt?: Decimal | number | string
    gte?: Decimal | number | string
    not?: NestedDecimalFilter | Decimal | number | string
  }

  export type OrderCreateWithoutUserInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    total: Decimal | number | string
    dateTime?: Date | string
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    promoCode?: PromoCodeCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    total: Decimal | number | string
    dateTime?: Date | string
    promoCodeId?: number | null
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderUncheckedCreateWithoutUserInput, OrderCreateWithoutUserInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUncheckedUpdateWithoutUserInput, OrderUpdateWithoutUserInput>
    create: XOR<OrderUncheckedCreateWithoutUserInput, OrderCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUncheckedUpdateWithoutUserInput, OrderUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUncheckedUpdateManyWithoutOrdersInput, OrderUpdateManyMutationInput>
  }

  export type OrderScalarWhereInput = {
    AND?: Enumerable<OrderScalarWhereInput>
    OR?: Enumerable<OrderScalarWhereInput>
    NOT?: Enumerable<OrderScalarWhereInput>
    id?: IntFilter | number
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    total?: DecimalFilter | Decimal | number | string
    dateTime?: DateTimeFilter | Date | string
    promoCodeId?: IntNullableFilter | number | null
    addressStreet1?: StringFilter | string
    addressStreet2?: StringNullableFilter | string | null
    addressCity?: StringFilter | string
    addressRegion?: StringFilter | string
    addressZip?: IntFilter | number
    status?: StringFilter | string
  }

  export type PromoCodeCreateWithoutOrdersInput = {
    name: string
    startDate?: Date | string
    expirationDate: Date | string
  }

  export type PromoCodeUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    startDate?: Date | string
    expirationDate: Date | string
  }

  export type PromoCodeCreateOrConnectWithoutOrdersInput = {
    where: PromoCodeWhereUniqueInput
    create: XOR<PromoCodeUncheckedCreateWithoutOrdersInput, PromoCodeCreateWithoutOrdersInput>
  }

  export type UserCreateWithoutOrdersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    phone?: number | null
    hashedPassword: string
    addressStreet1?: string | null
    addressStreet2?: string | null
    addressCity?: string | null
    addressRegion?: string | null
    addressZip?: number | null
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    email: string
    phone?: number | null
    hashedPassword: string
    addressStreet1?: string | null
    addressStreet2?: string | null
    addressCity?: string | null
    addressRegion?: string | null
    addressZip?: number | null
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutOrdersInput, UserCreateWithoutOrdersInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    quantity: number
    plant: PlantCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    plantId: number
    quantity: number
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemUncheckedCreateWithoutOrderInput, OrderItemCreateWithoutOrderInput>
  }

  export type PromoCodeUpsertWithoutOrdersInput = {
    update: XOR<PromoCodeUncheckedUpdateWithoutOrdersInput, PromoCodeUpdateWithoutOrdersInput>
    create: XOR<PromoCodeUncheckedCreateWithoutOrdersInput, PromoCodeCreateWithoutOrdersInput>
  }

  export type PromoCodeUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromoCodeUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expirationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUncheckedUpdateWithoutOrdersInput, UserUpdateWithoutOrdersInput>
    create: XOR<UserUncheckedCreateWithoutOrdersInput, UserCreateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    addressStreet1?: NullableStringFieldUpdateOperationsInput | string | null
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: NullableStringFieldUpdateOperationsInput | string | null
    addressRegion?: NullableStringFieldUpdateOperationsInput | string | null
    addressZip?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    addressStreet1?: NullableStringFieldUpdateOperationsInput | string | null
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: NullableStringFieldUpdateOperationsInput | string | null
    addressRegion?: NullableStringFieldUpdateOperationsInput | string | null
    addressZip?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUncheckedUpdateWithoutOrderInput, OrderItemUpdateWithoutOrderInput>
    create: XOR<OrderItemUncheckedCreateWithoutOrderInput, OrderItemCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUncheckedUpdateWithoutOrderInput, OrderItemUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUncheckedUpdateManyWithoutOrderItemsInput, OrderItemUpdateManyMutationInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: Enumerable<OrderItemScalarWhereInput>
    OR?: Enumerable<OrderItemScalarWhereInput>
    NOT?: Enumerable<OrderItemScalarWhereInput>
    id?: IntFilter | number
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    orderId?: IntFilter | number
    plantId?: IntFilter | number
    quantity?: IntFilter | number
  }

  export type OrderCreateWithoutOrderItemsInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    total: Decimal | number | string
    dateTime?: Date | string
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    promoCode?: PromoCodeCreateNestedOneWithoutOrdersInput
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    userId: number
    total: Decimal | number | string
    dateTime?: Date | string
    promoCodeId?: number | null
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
  }

  export type OrderCreateOrConnectWithoutOrderItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderUncheckedCreateWithoutOrderItemsInput, OrderCreateWithoutOrderItemsInput>
  }

  export type PlantCreateWithoutOrderItemsInput = {
    name: string
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    type: PlantTypeCreateNestedOneWithoutPlantsInput
    tags?: PlantTagCreateNestedManyWithoutPlantInput
    images?: ImageCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    name: string
    typeId: number
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    tags?: PlantTagUncheckedCreateNestedManyWithoutPlantInput
    images?: ImageUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutOrderItemsInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantUncheckedCreateWithoutOrderItemsInput, PlantCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutOrderItemsInput = {
    update: XOR<OrderUncheckedUpdateWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>
    create: XOR<OrderUncheckedCreateWithoutOrderItemsInput, OrderCreateWithoutOrderItemsInput>
  }

  export type OrderUpdateWithoutOrderItemsInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    promoCode?: PromoCodeUpdateOneWithoutOrdersInput
    user?: UserUpdateOneRequiredWithoutOrdersInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    promoCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PlantUpsertWithoutOrderItemsInput = {
    update: XOR<PlantUncheckedUpdateWithoutOrderItemsInput, PlantUpdateWithoutOrderItemsInput>
    create: XOR<PlantUncheckedCreateWithoutOrderItemsInput, PlantCreateWithoutOrderItemsInput>
  }

  export type PlantUpdateWithoutOrderItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    type?: PlantTypeUpdateOneRequiredWithoutPlantsInput
    tags?: PlantTagUpdateManyWithoutPlantInput
    images?: ImageUpdateManyWithoutPlantInput
  }

  export type PlantUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    tags?: PlantTagUncheckedUpdateManyWithoutPlantInput
    images?: ImageUncheckedUpdateManyWithoutPlantInput
  }

  export type OrderCreateWithoutPromoCodeInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    total: Decimal | number | string
    dateTime?: Date | string
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    user: UserCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPromoCodeInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    userId: number
    total: Decimal | number | string
    dateTime?: Date | string
    addressStreet1: string
    addressStreet2?: string | null
    addressCity: string
    addressRegion: string
    addressZip: number
    status: string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPromoCodeInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderUncheckedCreateWithoutPromoCodeInput, OrderCreateWithoutPromoCodeInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutPromoCodeInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUncheckedUpdateWithoutPromoCodeInput, OrderUpdateWithoutPromoCodeInput>
    create: XOR<OrderUncheckedCreateWithoutPromoCodeInput, OrderCreateWithoutPromoCodeInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutPromoCodeInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUncheckedUpdateWithoutPromoCodeInput, OrderUpdateWithoutPromoCodeInput>
  }

  export type OrderUpdateManyWithWhereWithoutPromoCodeInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUncheckedUpdateManyWithoutOrdersInput, OrderUpdateManyMutationInput>
  }

  export type PlantTypeCreateWithoutPlantsInput = {
    name: string
  }

  export type PlantTypeUncheckedCreateWithoutPlantsInput = {
    id?: number
    name: string
  }

  export type PlantTypeCreateOrConnectWithoutPlantsInput = {
    where: PlantTypeWhereUniqueInput
    create: XOR<PlantTypeUncheckedCreateWithoutPlantsInput, PlantTypeCreateWithoutPlantsInput>
  }

  export type PlantTagCreateWithoutPlantInput = {
    tag: TagCreateNestedOneWithoutPlantsInput
  }

  export type PlantTagUncheckedCreateWithoutPlantInput = {
    id?: number
    tagId: number
  }

  export type PlantTagCreateOrConnectWithoutPlantInput = {
    where: PlantTagWhereUniqueInput
    create: XOR<PlantTagUncheckedCreateWithoutPlantInput, PlantTagCreateWithoutPlantInput>
  }

  export type ImageCreateWithoutPlantInput = {
    sequence?: number
    url: string
  }

  export type ImageUncheckedCreateWithoutPlantInput = {
    id?: number
    sequence?: number
    url: string
  }

  export type ImageCreateOrConnectWithoutPlantInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageUncheckedCreateWithoutPlantInput, ImageCreateWithoutPlantInput>
  }

  export type OrderItemCreateWithoutPlantInput = {
    updatedAt?: Date | string
    createdAt?: Date | string
    quantity: number
    order: OrderCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutPlantInput = {
    id?: number
    updatedAt?: Date | string
    createdAt?: Date | string
    orderId: number
    quantity: number
  }

  export type OrderItemCreateOrConnectWithoutPlantInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemUncheckedCreateWithoutPlantInput, OrderItemCreateWithoutPlantInput>
  }

  export type PlantTypeUpsertWithoutPlantsInput = {
    update: XOR<PlantTypeUncheckedUpdateWithoutPlantsInput, PlantTypeUpdateWithoutPlantsInput>
    create: XOR<PlantTypeUncheckedCreateWithoutPlantsInput, PlantTypeCreateWithoutPlantsInput>
  }

  export type PlantTypeUpdateWithoutPlantsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantTypeUncheckedUpdateWithoutPlantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantTagUpsertWithWhereUniqueWithoutPlantInput = {
    where: PlantTagWhereUniqueInput
    update: XOR<PlantTagUncheckedUpdateWithoutPlantInput, PlantTagUpdateWithoutPlantInput>
    create: XOR<PlantTagUncheckedCreateWithoutPlantInput, PlantTagCreateWithoutPlantInput>
  }

  export type PlantTagUpdateWithWhereUniqueWithoutPlantInput = {
    where: PlantTagWhereUniqueInput
    data: XOR<PlantTagUncheckedUpdateWithoutPlantInput, PlantTagUpdateWithoutPlantInput>
  }

  export type PlantTagUpdateManyWithWhereWithoutPlantInput = {
    where: PlantTagScalarWhereInput
    data: XOR<PlantTagUncheckedUpdateManyWithoutTagsInput, PlantTagUpdateManyMutationInput>
  }

  export type PlantTagScalarWhereInput = {
    AND?: Enumerable<PlantTagScalarWhereInput>
    OR?: Enumerable<PlantTagScalarWhereInput>
    NOT?: Enumerable<PlantTagScalarWhereInput>
    id?: IntFilter | number
    plantId?: IntFilter | number
    tagId?: IntFilter | number
  }

  export type ImageUpsertWithWhereUniqueWithoutPlantInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUncheckedUpdateWithoutPlantInput, ImageUpdateWithoutPlantInput>
    create: XOR<ImageUncheckedCreateWithoutPlantInput, ImageCreateWithoutPlantInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutPlantInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUncheckedUpdateWithoutPlantInput, ImageUpdateWithoutPlantInput>
  }

  export type ImageUpdateManyWithWhereWithoutPlantInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUncheckedUpdateManyWithoutImagesInput, ImageUpdateManyMutationInput>
  }

  export type ImageScalarWhereInput = {
    AND?: Enumerable<ImageScalarWhereInput>
    OR?: Enumerable<ImageScalarWhereInput>
    NOT?: Enumerable<ImageScalarWhereInput>
    id?: IntFilter | number
    plantId?: IntFilter | number
    sequence?: IntFilter | number
    url?: StringFilter | string
  }

  export type OrderItemUpsertWithWhereUniqueWithoutPlantInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUncheckedUpdateWithoutPlantInput, OrderItemUpdateWithoutPlantInput>
    create: XOR<OrderItemUncheckedCreateWithoutPlantInput, OrderItemCreateWithoutPlantInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutPlantInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUncheckedUpdateWithoutPlantInput, OrderItemUpdateWithoutPlantInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutPlantInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUncheckedUpdateManyWithoutOrderItemsInput, OrderItemUpdateManyMutationInput>
  }

  export type PlantCreateWithoutTypeInput = {
    name: string
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    tags?: PlantTagCreateNestedManyWithoutPlantInput
    images?: ImageCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutTypeInput = {
    id?: number
    name: string
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    tags?: PlantTagUncheckedCreateNestedManyWithoutPlantInput
    images?: ImageUncheckedCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutTypeInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantUncheckedCreateWithoutTypeInput, PlantCreateWithoutTypeInput>
  }

  export type PlantUpsertWithWhereUniqueWithoutTypeInput = {
    where: PlantWhereUniqueInput
    update: XOR<PlantUncheckedUpdateWithoutTypeInput, PlantUpdateWithoutTypeInput>
    create: XOR<PlantUncheckedCreateWithoutTypeInput, PlantCreateWithoutTypeInput>
  }

  export type PlantUpdateWithWhereUniqueWithoutTypeInput = {
    where: PlantWhereUniqueInput
    data: XOR<PlantUncheckedUpdateWithoutTypeInput, PlantUpdateWithoutTypeInput>
  }

  export type PlantUpdateManyWithWhereWithoutTypeInput = {
    where: PlantScalarWhereInput
    data: XOR<PlantUncheckedUpdateManyWithoutPlantsInput, PlantUpdateManyMutationInput>
  }

  export type PlantScalarWhereInput = {
    AND?: Enumerable<PlantScalarWhereInput>
    OR?: Enumerable<PlantScalarWhereInput>
    NOT?: Enumerable<PlantScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    typeId?: IntFilter | number
    description?: StringFilter | string
    dimensions?: StringFilter | string
    price?: DecimalFilter | Decimal | number | string
    stock?: IntFilter | number
    potSize?: StringFilter | string
  }

  export type PlantCreateWithoutImagesInput = {
    name: string
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    type: PlantTypeCreateNestedOneWithoutPlantsInput
    tags?: PlantTagCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutImagesInput = {
    id?: number
    name: string
    typeId: number
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    tags?: PlantTagUncheckedCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutImagesInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantUncheckedCreateWithoutImagesInput, PlantCreateWithoutImagesInput>
  }

  export type PlantUpsertWithoutImagesInput = {
    update: XOR<PlantUncheckedUpdateWithoutImagesInput, PlantUpdateWithoutImagesInput>
    create: XOR<PlantUncheckedCreateWithoutImagesInput, PlantCreateWithoutImagesInput>
  }

  export type PlantUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    type?: PlantTypeUpdateOneRequiredWithoutPlantsInput
    tags?: PlantTagUpdateManyWithoutPlantInput
    orderItems?: OrderItemUpdateManyWithoutPlantInput
  }

  export type PlantUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    tags?: PlantTagUncheckedUpdateManyWithoutPlantInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutPlantInput
  }

  export type PlantTagCreateWithoutTagInput = {
    plant: PlantCreateNestedOneWithoutTagsInput
  }

  export type PlantTagUncheckedCreateWithoutTagInput = {
    id?: number
    plantId: number
  }

  export type PlantTagCreateOrConnectWithoutTagInput = {
    where: PlantTagWhereUniqueInput
    create: XOR<PlantTagUncheckedCreateWithoutTagInput, PlantTagCreateWithoutTagInput>
  }

  export type PlantTagUpsertWithWhereUniqueWithoutTagInput = {
    where: PlantTagWhereUniqueInput
    update: XOR<PlantTagUncheckedUpdateWithoutTagInput, PlantTagUpdateWithoutTagInput>
    create: XOR<PlantTagUncheckedCreateWithoutTagInput, PlantTagCreateWithoutTagInput>
  }

  export type PlantTagUpdateWithWhereUniqueWithoutTagInput = {
    where: PlantTagWhereUniqueInput
    data: XOR<PlantTagUncheckedUpdateWithoutTagInput, PlantTagUpdateWithoutTagInput>
  }

  export type PlantTagUpdateManyWithWhereWithoutTagInput = {
    where: PlantTagScalarWhereInput
    data: XOR<PlantTagUncheckedUpdateManyWithoutPlantsInput, PlantTagUpdateManyMutationInput>
  }

  export type PlantCreateWithoutTagsInput = {
    name: string
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    type: PlantTypeCreateNestedOneWithoutPlantsInput
    images?: ImageCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutTagsInput = {
    id?: number
    name: string
    typeId: number
    description: string
    dimensions: string
    price: Decimal | number | string
    stock: number
    potSize: string
    images?: ImageUncheckedCreateNestedManyWithoutPlantInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutTagsInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantUncheckedCreateWithoutTagsInput, PlantCreateWithoutTagsInput>
  }

  export type TagCreateWithoutPlantsInput = {
    name: string
  }

  export type TagUncheckedCreateWithoutPlantsInput = {
    id?: number
    name: string
  }

  export type TagCreateOrConnectWithoutPlantsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagUncheckedCreateWithoutPlantsInput, TagCreateWithoutPlantsInput>
  }

  export type PlantUpsertWithoutTagsInput = {
    update: XOR<PlantUncheckedUpdateWithoutTagsInput, PlantUpdateWithoutTagsInput>
    create: XOR<PlantUncheckedCreateWithoutTagsInput, PlantCreateWithoutTagsInput>
  }

  export type PlantUpdateWithoutTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    type?: PlantTypeUpdateOneRequiredWithoutPlantsInput
    images?: ImageUpdateManyWithoutPlantInput
    orderItems?: OrderItemUpdateManyWithoutPlantInput
  }

  export type PlantUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    images?: ImageUncheckedUpdateManyWithoutPlantInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutPlantInput
  }

  export type TagUpsertWithoutPlantsInput = {
    update: XOR<TagUncheckedUpdateWithoutPlantsInput, TagUpdateWithoutPlantsInput>
    create: XOR<TagUncheckedCreateWithoutPlantsInput, TagCreateWithoutPlantsInput>
  }

  export type TagUpdateWithoutPlantsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutPlantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutUserInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    promoCode?: PromoCodeUpdateOneWithoutOrdersInput
    orderItems?: OrderItemUpdateManyWithoutOrderInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    promoCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderInput
  }

  export type OrderUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    promoCodeId?: NullableIntFieldUpdateOperationsInput | number | null
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    plant?: PlantUpdateOneRequiredWithoutOrderItemsInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plantId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plantId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderUpdateWithoutPromoCodeInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrdersInput
    orderItems?: OrderItemUpdateManyWithoutOrderInput
  }

  export type OrderUncheckedUpdateWithoutPromoCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    total?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    addressStreet1?: StringFieldUpdateOperationsInput | string
    addressStreet2?: NullableStringFieldUpdateOperationsInput | string | null
    addressCity?: StringFieldUpdateOperationsInput | string
    addressRegion?: StringFieldUpdateOperationsInput | string
    addressZip?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderInput
  }

  export type PlantTagUpdateWithoutPlantInput = {
    tag?: TagUpdateOneRequiredWithoutPlantsInput
  }

  export type PlantTagUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type PlantTagUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUpdateWithoutPlantInput = {
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sequence?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemUpdateWithoutPlantInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderItemsInput
  }

  export type OrderItemUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PlantUpdateWithoutTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    tags?: PlantTagUpdateManyWithoutPlantInput
    images?: ImageUpdateManyWithoutPlantInput
    orderItems?: OrderItemUpdateManyWithoutPlantInput
  }

  export type PlantUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
    tags?: PlantTagUncheckedUpdateManyWithoutPlantInput
    images?: ImageUncheckedUpdateManyWithoutPlantInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutPlantInput
  }

  export type PlantUncheckedUpdateManyWithoutPlantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dimensions?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | number | string
    stock?: IntFieldUpdateOperationsInput | number
    potSize?: StringFieldUpdateOperationsInput | string
  }

  export type PlantTagUpdateWithoutTagInput = {
    plant?: PlantUpdateOneRequiredWithoutTagsInput
  }

  export type PlantTagUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
  }

  export type PlantTagUncheckedUpdateManyWithoutPlantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}