
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.17.0
 * Query Engine version: 3c463ebd78b1d21d8fdacdd27899e280cf686223
 */
Prisma.prismaVersion = {
  client: "2.17.0",
  engine: "3c463ebd78b1d21d8fdacdd27899e280cf686223"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  hashedPassword: 'hashedPassword',
  addressStreet1: 'addressStreet1',
  addressStreet2: 'addressStreet2',
  addressCity: 'addressCity',
  addressRegion: 'addressRegion',
  addressZip: 'addressZip'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  userId: 'userId',
  total: 'total',
  dateTime: 'dateTime',
  promoCodeId: 'promoCodeId',
  addressStreet1: 'addressStreet1',
  addressStreet2: 'addressStreet2',
  addressCity: 'addressCity',
  addressRegion: 'addressRegion',
  addressZip: 'addressZip',
  status: 'status'
});

exports.Prisma.OrderItemScalarFieldEnum = makeEnum({
  id: 'id',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  orderId: 'orderId',
  plantId: 'plantId',
  quantity: 'quantity'
});

exports.Prisma.PromoCodeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  expirationDate: 'expirationDate'
});

exports.Prisma.PlantScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  typeId: 'typeId',
  description: 'description',
  dimensions: 'dimensions',
  price: 'price',
  stock: 'stock',
  potSize: 'potSize'
});

exports.Prisma.PlantTypeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.ImageScalarFieldEnum = makeEnum({
  id: 'id',
  plantId: 'plantId',
  sequence: 'sequence',
  url: 'url'
});

exports.Prisma.TagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.PlantTagScalarFieldEnum = makeEnum({
  id: 'id',
  plantId: 'plantId',
  tagId: 'tagId'
});

exports.Prisma.ThemeScalarFieldEnum = makeEnum({
  id: 'id',
  headliner1: 'headliner1',
  headliner2: 'headliner2',
  headliner3: 'headliner3',
  coverPicture1: 'coverPicture1',
  coverPicture2: 'coverPicture2',
  coverPicture3: 'coverPicture3',
  coverPicture4: 'coverPicture4',
  coverPicture5: 'coverPicture5',
  mainText1: 'mainText1',
  mainText2: 'mainText2',
  mainText3: 'mainText3'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Order: 'Order',
  OrderItem: 'OrderItem',
  PromoCode: 'PromoCode',
  Plant: 'Plant',
  PlantType: 'PlantType',
  Image: 'Image',
  Tag: 'Tag',
  PlantTag: 'PlantTag',
  Theme: 'Theme'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
